
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Feb 15 23:49:24 CST 2016
//----------------------------------------------------

package ArchivosCodigo;

import static ArchivosCodigo.ParseCodigo.programa;
import java.io.*;
import java_cup.runtime.*;
import java.util.*;
import javax.swing.JOptionPane;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Feb 15 23:49:24 CST 2016
  */
public class ParseCodigo extends java_cup.runtime.lr_parser {
    public static Stack programa= new Stack();

  /** Default constructor. */
  public ParseCodigo() {super();}

  /** Constructor which sets the default scanner. */
  public ParseCodigo(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParseCodigo(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\201\000\002\002\004\000\002\041\002\000\002\042" +
    "\002\000\002\043\002\000\002\044\002\000\002\045\002" +
    "\000\002\002\017\000\002\002\003\000\002\002\004\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\033\003\000\002\033\003\000\002\017\004\000\002\017" +
    "\005\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\021\004\000\002\046\002\000\002\047\002\000\002" +
    "\021\007\000\002\050\002\000\002\051\002\000\002\021" +
    "\007\000\002\021\004\000\002\052\002\000\002\053\002" +
    "\000\002\054\002\000\002\040\012\000\002\040\002\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\022\005\000\002\022" +
    "\005\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\025\003\000\002\025\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\030\003\000\002" +
    "\030\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\002\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\036\003\000\002" +
    "\036\003\000\002\037\003\000\002\037\003\000\002\055" +
    "\002\000\002\056\002\000\002\003\014\000\002\057\002" +
    "\000\002\003\013\000\002\060\002\000\002\061\002\000" +
    "\002\004\016\000\002\004\007\000\002\004\011\000\002" +
    "\062\002\000\002\004\010\000\002\004\004\000\002\004" +
    "\003\000\002\004\004\000\002\004\005\000\002\004\004" +
    "\000\002\004\003\000\002\063\002\000\002\064\002\000" +
    "\002\004\016\000\002\004\007\000\002\004\003\000\002" +
    "\004\003\000\002\065\002\000\002\066\002\000\002\004" +
    "\013\000\002\004\002\000\002\067\002\000\002\070\002" +
    "\000\002\005\010\000\002\014\004\000\002\010\004\000" +
    "\002\011\004\000\002\011\004\000\002\071\002\000\002" +
    "\016\005\000\002\072\002\000\002\016\005\000\002\012" +
    "\004\000\002\073\002\000\002\013\005\000\002\074\002" +
    "\000\002\013\005\000\002\013\003\000\002\013\003\000" +
    "\002\075\002\000\002\076\002\000\002\012\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\331\000\016\004\006\010\014\011\015\012\004\017" +
    "\013\021\012\001\002\000\032\010\ufff6\011\ufff6\012\ufff6" +
    "\013\ufff6\014\ufff6\016\ufff6\022\ufff6\023\ufff6\024\ufff6\025" +
    "\ufff6\026\ufff6\027\ufff6\001\002\000\022\013\052\016\050" +
    "\022\041\023\045\024\046\025\042\026\043\027\047\001" +
    "\002\000\006\044\000\045\000\001\002\000\016\004\006" +
    "\010\014\011\015\012\004\017\013\021\012\001\002\000" +
    "\004\002\ufffa\001\002\000\004\002\021\001\002\000\004" +
    "\014\017\001\002\000\004\014\016\001\002\000\032\010" +
    "\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\016\ufff8\022\ufff8" +
    "\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\001\002\000" +
    "\032\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\016\ufff7" +
    "\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\001" +
    "\002\000\132\004\ufff3\005\ufff3\010\ufff3\011\ufff3\012\ufff3" +
    "\014\ufff3\015\ufff3\017\ufff3\021\ufff3\022\ufff3\023\ufff3\024" +
    "\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3" +
    "\033\ufff3\044\ufff3\045\ufff3\052\ufff3\053\ufff3\054\ufff3\055" +
    "\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\065\ufff3" +
    "\066\ufff3\067\ufff3\070\ufff3\071\ufff3\074\ufff3\075\ufff3\076" +
    "\ufff3\077\ufff3\100\ufff3\101\ufff3\102\ufff3\103\ufff3\104\ufff3" +
    "\001\002\000\004\072\020\001\002\000\132\004\ufff2\005" +
    "\ufff2\010\ufff2\011\ufff2\012\ufff2\014\ufff2\015\ufff2\017\ufff2" +
    "\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027" +
    "\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\044\ufff2\045\ufff2" +
    "\052\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060" +
    "\ufff2\061\ufff2\062\ufff2\065\ufff2\066\ufff2\067\ufff2\070\ufff2" +
    "\071\ufff2\074\ufff2\075\ufff2\076\ufff2\077\ufff2\100\ufff2\101" +
    "\ufff2\102\ufff2\103\ufff2\104\ufff2\001\002\000\004\002\001" +
    "\001\002\000\004\002\ufff9\001\002\000\006\044\024\045" +
    "\025\001\002\000\134\005\uffd0\010\uffd0\011\uffd0\012\uffd0" +
    "\014\uffd0\015\uffd0\017\uffd0\021\uffd0\022\uffd0\023\uffd0\024" +
    "\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0" +
    "\033\uffd0\044\uffd0\045\uffd0\052\uffd0\053\uffd0\054\uffd0\055" +
    "\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0" +
    "\064\uffd0\065\uffd0\066\uffd0\067\uffd0\070\uffd0\071\uffd0\074" +
    "\uffd0\075\uffd0\076\uffd0\077\uffd0\100\uffd0\101\uffd0\102\uffd0" +
    "\103\uffd0\104\uffd0\001\002\000\134\005\uffcf\010\uffcf\011" +
    "\uffcf\012\uffcf\014\uffcf\015\uffcf\017\uffcf\021\uffcf\022\uffcf" +
    "\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031" +
    "\uffcf\032\uffcf\033\uffcf\044\uffcf\045\uffcf\052\uffcf\053\uffcf" +
    "\054\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062" +
    "\uffcf\063\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\070\uffcf" +
    "\071\uffcf\074\uffcf\075\uffcf\076\uffcf\077\uffcf\100\uffcf\101" +
    "\uffcf\102\uffcf\103\uffcf\104\uffcf\001\002\000\004\052\027" +
    "\001\002\000\004\014\uffff\001\002\000\004\014\031\001" +
    "\002\000\004\052\ufffe\001\002\000\004\052\033\001\002" +
    "\000\006\044\ufffd\045\ufffd\001\002\000\006\044\024\045" +
    "\025\001\002\000\004\064\036\001\002\000\010\010\ufffc" +
    "\011\ufffc\012\ufffc\001\002\000\010\010\014\011\015\012" +
    "\004\001\002\000\004\002\ufffb\001\002\000\012\010\ufff1" +
    "\011\ufff1\012\ufff1\014\ufff1\001\002\000\012\010\uffee\011" +
    "\uffee\012\uffee\014\uffee\001\002\000\012\010\uffed\011\uffed" +
    "\012\uffed\014\uffed\001\002\000\004\014\324\001\002\000" +
    "\012\010\ufff0\011\ufff0\012\ufff0\014\ufff0\001\002\000\012" +
    "\010\uffef\011\uffef\012\uffef\014\uffef\001\002\000\012\010" +
    "\uffec\011\uffec\012\uffec\014\uffec\001\002\000\004\014\ufff5" +
    "\001\002\000\004\014\053\001\002\000\004\014\ufff4\001" +
    "\002\000\006\044\uffae\045\uffae\001\002\000\006\044\024" +
    "\045\025\001\002\000\006\044\024\045\025\001\002\000" +
    "\022\052\060\053\057\054\065\055\064\056\066\060\063" +
    "\061\062\062\067\001\002\000\132\002\uffc9\005\uffc9\010" +
    "\uffc9\011\uffc9\012\uffc9\014\uffc9\015\uffc9\017\uffc9\021\uffc9" +
    "\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030" +
    "\uffc9\031\uffc9\032\uffc9\033\uffc9\044\uffc9\045\uffc9\052\uffc9" +
    "\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\061" +
    "\uffc9\062\uffc9\065\uffc9\066\uffc9\067\uffc9\070\uffc9\071\uffc9" +
    "\074\uffc9\075\uffc9\076\uffc9\077\uffc9\100\uffc9\101\uffc9\102" +
    "\uffc9\103\uffc9\104\uffc9\001\002\000\132\002\uffca\005\uffca" +
    "\010\uffca\011\uffca\012\uffca\014\uffca\015\uffca\017\uffca\021" +
    "\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca" +
    "\030\uffca\031\uffca\032\uffca\033\uffca\044\uffca\045\uffca\052" +
    "\uffca\053\uffca\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca" +
    "\061\uffca\062\uffca\065\uffca\066\uffca\067\uffca\070\uffca\071" +
    "\uffca\074\uffca\075\uffca\076\uffca\077\uffca\100\uffca\101\uffca" +
    "\102\uffca\103\uffca\104\uffca\001\002\000\130\005\110\010" +
    "\014\011\015\012\004\014\114\015\130\017\013\021\012" +
    "\022\041\023\045\024\046\025\042\026\043\027\047\030" +
    "\105\031\126\032\132\033\107\044\uffbc\045\uffbc\052\uff96" +
    "\053\uff96\054\uff96\055\uff96\056\uff96\057\115\060\uff96\061" +
    "\uff96\062\uff96\065\072\066\071\067\073\070\106\071\116" +
    "\074\104\075\113\076\103\077\070\100\125\101\077\102" +
    "\101\103\074\104\102\001\002\000\132\002\uffc4\005\uffc4" +
    "\010\uffc4\011\uffc4\012\uffc4\014\uffc4\015\uffc4\017\uffc4\021" +
    "\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4" +
    "\030\uffc4\031\uffc4\032\uffc4\033\uffc4\044\uffc4\045\uffc4\052" +
    "\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4" +
    "\061\uffc4\062\uffc4\065\uffc4\066\uffc4\067\uffc4\070\uffc4\071" +
    "\uffc4\074\uffc4\075\uffc4\076\uffc4\077\uffc4\100\uffc4\101\uffc4" +
    "\102\uffc4\103\uffc4\104\uffc4\001\002\000\132\002\uffc5\005" +
    "\uffc5\010\uffc5\011\uffc5\012\uffc5\014\uffc5\015\uffc5\017\uffc5" +
    "\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027" +
    "\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\044\uffc5\045\uffc5" +
    "\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060" +
    "\uffc5\061\uffc5\062\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5" +
    "\071\uffc5\074\uffc5\075\uffc5\076\uffc5\077\uffc5\100\uffc5\101" +
    "\uffc5\102\uffc5\103\uffc5\104\uffc5\001\002\000\132\002\uffc7" +
    "\005\uffc7\010\uffc7\011\uffc7\012\uffc7\014\uffc7\015\uffc7\017" +
    "\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7" +
    "\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\044\uffc7\045" +
    "\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7" +
    "\060\uffc7\061\uffc7\062\uffc7\065\uffc7\066\uffc7\067\uffc7\070" +
    "\uffc7\071\uffc7\074\uffc7\075\uffc7\076\uffc7\077\uffc7\100\uffc7" +
    "\101\uffc7\102\uffc7\103\uffc7\104\uffc7\001\002\000\132\002" +
    "\uffc8\005\uffc8\010\uffc8\011\uffc8\012\uffc8\014\uffc8\015\uffc8" +
    "\017\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026" +
    "\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\044\uffc8" +
    "\045\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057" +
    "\uffc8\060\uffc8\061\uffc8\062\uffc8\065\uffc8\066\uffc8\067\uffc8" +
    "\070\uffc8\071\uffc8\074\uffc8\075\uffc8\076\uffc8\077\uffc8\100" +
    "\uffc8\101\uffc8\102\uffc8\103\uffc8\104\uffc8\001\002\000\132" +
    "\002\uffc6\005\uffc6\010\uffc6\011\uffc6\012\uffc6\014\uffc6\015" +
    "\uffc6\017\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6" +
    "\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\044" +
    "\uffc6\045\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6" +
    "\057\uffc6\060\uffc6\061\uffc6\062\uffc6\065\uffc6\066\uffc6\067" +
    "\uffc6\070\uffc6\071\uffc6\074\uffc6\075\uffc6\076\uffc6\077\uffc6" +
    "\100\uffc6\101\uffc6\102\uffc6\103\uffc6\104\uffc6\001\002\000" +
    "\132\002\uffc3\005\uffc3\010\uffc3\011\uffc3\012\uffc3\014\uffc3" +
    "\015\uffc3\017\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025" +
    "\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3" +
    "\044\uffc3\045\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056" +
    "\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3\065\uffc3\066\uffc3" +
    "\067\uffc3\070\uffc3\071\uffc3\074\uffc3\075\uffc3\076\uffc3\077" +
    "\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3\104\uffc3\001\002" +
    "\000\010\014\uffb7\044\uffb7\045\uffb7\001\002\000\010\014" +
    "\uffbf\044\uffbf\045\uffbf\001\002\000\010\014\uffc0\044\uffc0" +
    "\045\uffc0\001\002\000\010\014\uffbe\044\uffbe\045\uffbe\001" +
    "\002\000\022\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3" +
    "\060\uffb3\061\uffb3\062\uffb3\001\002\000\010\014\314\044" +
    "\024\045\025\001\002\000\026\044\024\045\025\052\060" +
    "\053\057\054\065\055\064\056\066\060\063\061\062\062" +
    "\067\001\002\000\026\044\uffb5\045\uffb5\052\uffb5\053\uffb5" +
    "\054\uffb5\055\uffb5\056\uffb5\060\uffb5\061\uffb5\062\uffb5\001" +
    "\002\000\012\010\014\011\015\012\004\014\247\001\002" +
    "\000\026\044\uffb4\045\uffb4\052\uffb4\053\uffb4\054\uffb4\055" +
    "\uffb4\056\uffb4\060\uffb4\061\uffb4\062\uffb4\001\002\000\022" +
    "\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\060\uffb2\061" +
    "\uffb2\062\uffb2\001\002\000\010\014\uffb8\044\uffb8\045\uffb8" +
    "\001\002\000\026\044\uffba\045\uffba\052\uffba\053\uffba\054" +
    "\uffba\055\uffba\056\uffba\060\uffba\061\uffba\062\uffba\001\002" +
    "\000\006\014\uffde\015\uffde\001\002\000\010\014\uffbd\044" +
    "\uffbd\045\uffbd\001\002\000\006\014\uffda\015\uffda\001\002" +
    "\000\006\014\uffdb\015\uffdb\001\002\000\026\044\024\045" +
    "\025\052\060\053\057\054\065\055\064\056\066\060\063" +
    "\061\062\062\067\001\002\000\022\052\uff9b\053\uff9b\054" +
    "\uff9b\055\uff9b\056\uff9b\060\uff9b\061\uff9b\062\uff9b\001\002" +
    "\000\026\044\uffb9\045\uffb9\052\uffb9\053\uffb9\054\uffb9\055" +
    "\uffb9\056\uffb9\060\uffb9\061\uffb9\062\uffb9\001\002\000\006" +
    "\044\uff83\045\uff83\001\002\000\006\044\uff99\045\uff99\001" +
    "\002\000\026\044\uffbb\045\uffbb\052\uffbb\053\uffbb\054\uffbb" +
    "\055\uffbb\056\uffbb\060\uffbb\061\uffbb\062\uffbb\001\002\000" +
    "\022\052\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\060\uff9a" +
    "\061\uff9a\062\uff9a\001\002\000\022\052\060\053\057\054" +
    "\065\055\064\056\066\060\063\061\062\062\067\001\002" +
    "\000\022\052\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\060" +
    "\uffa0\061\uffa0\062\uffa0\001\002\000\022\052\uffa4\053\uffa4" +
    "\054\uffa4\055\uffa4\056\uffa4\060\uffa4\061\uffa4\062\uffa4\001" +
    "\002\000\006\014\166\015\167\001\002\000\010\014\143" +
    "\044\024\045\025\001\002\000\010\014\uffb6\044\uffb6\045" +
    "\uffb6\001\002\000\006\014\uffdd\015\uffdd\001\002\000\130" +
    "\005\110\010\014\011\015\012\004\014\114\015\130\017" +
    "\013\021\012\022\041\023\045\024\046\025\042\026\043" +
    "\027\047\030\105\031\126\032\132\033\107\044\uffbc\045" +
    "\uffbc\052\uff96\053\uff96\054\uff96\055\uff96\056\uff96\057\115" +
    "\060\uff96\061\uff96\062\uff96\065\072\066\071\067\073\070" +
    "\106\071\116\074\104\075\113\076\103\077\070\100\125" +
    "\101\077\102\101\103\074\104\102\001\002\000\014\005" +
    "\110\030\105\031\126\032\132\033\107\001\002\000\130" +
    "\005\110\010\014\011\015\012\004\014\114\015\130\017" +
    "\013\021\012\022\041\023\045\024\046\025\042\026\043" +
    "\027\047\030\105\031\126\032\132\033\107\044\uffbc\045" +
    "\uffbc\052\uff96\053\uff96\054\uff96\055\uff96\056\uff96\057\115" +
    "\060\uff96\061\uff96\062\uff96\065\072\066\071\067\073\070" +
    "\106\071\116\074\104\075\113\076\103\077\070\100\125" +
    "\101\077\102\101\103\074\104\102\001\002\000\006\014" +
    "\uffdc\015\uffdc\001\002\000\022\052\uffa1\053\uffa1\054\uffa1" +
    "\055\uffa1\056\uffa1\060\uffa1\061\uffa1\062\uffa1\001\002\000" +
    "\004\015\137\001\002\000\130\005\uff92\010\uff92\011\uff92" +
    "\012\uff92\014\uff92\015\uff92\017\uff92\021\uff92\022\uff92\023" +
    "\uff92\024\uff92\025\uff92\026\uff92\027\uff92\030\uff92\031\uff92" +
    "\032\uff92\033\uff92\044\uff92\045\uff92\052\uff92\053\uff92\054" +
    "\uff92\055\uff92\056\uff92\057\uff92\060\uff92\061\uff92\062\uff92" +
    "\065\uff92\066\uff92\067\uff92\070\uff92\071\uff92\074\uff92\075" +
    "\uff92\076\uff92\077\uff92\100\uff92\101\uff92\102\uff92\103\uff92" +
    "\104\uff92\001\002\000\130\005\uff91\010\uff91\011\uff91\012" +
    "\uff91\014\uff91\015\uff91\017\uff91\021\uff91\022\uff91\023\uff91" +
    "\024\uff91\025\uff91\026\uff91\027\uff91\030\uff91\031\uff91\032" +
    "\uff91\033\uff91\044\uff91\045\uff91\052\uff91\053\uff91\054\uff91" +
    "\055\uff91\056\uff91\057\uff91\060\uff91\061\uff91\062\uff91\065" +
    "\uff91\066\uff91\067\uff91\070\uff91\071\uff91\074\uff91\075\uff91" +
    "\076\uff91\077\uff91\100\uff91\101\uff91\102\uff91\103\uff91\104" +
    "\uff91\001\002\000\016\005\110\030\105\031\126\032\132" +
    "\033\107\064\141\001\002\000\130\005\uff90\010\uff90\011" +
    "\uff90\012\uff90\014\uff90\015\uff90\017\uff90\021\uff90\022\uff90" +
    "\023\uff90\024\uff90\025\uff90\026\uff90\027\uff90\030\uff90\031" +
    "\uff90\032\uff90\033\uff90\044\uff90\045\uff90\052\uff90\053\uff90" +
    "\054\uff90\055\uff90\056\uff90\057\uff90\060\uff90\061\uff90\062" +
    "\uff90\065\uff90\066\uff90\067\uff90\070\uff90\071\uff90\074\uff90" +
    "\075\uff90\076\uff90\077\uff90\100\uff90\101\uff90\102\uff90\103" +
    "\uff90\104\uff90\001\002\000\130\005\uff8f\010\uff8f\011\uff8f" +
    "\012\uff8f\014\uff8f\015\uff8f\017\uff8f\021\uff8f\022\uff8f\023" +
    "\uff8f\024\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f" +
    "\032\uff8f\033\uff8f\044\uff8f\045\uff8f\052\uff8f\053\uff8f\054" +
    "\uff8f\055\uff8f\056\uff8f\057\uff8f\060\uff8f\061\uff8f\062\uff8f" +
    "\065\uff8f\066\uff8f\067\uff8f\070\uff8f\071\uff8f\074\uff8f\075" +
    "\uff8f\076\uff8f\077\uff8f\100\uff8f\101\uff8f\102\uff8f\103\uff8f" +
    "\104\uff8f\001\002\000\022\052\uffa3\053\uffa3\054\uffa3\055" +
    "\uffa3\056\uffa3\060\uffa3\061\uffa3\062\uffa3\001\002\000\004" +
    "\073\uff95\001\002\000\006\014\145\015\146\001\002\000" +
    "\016\005\uff8c\014\uff8c\030\uff8c\031\uff8c\032\uff8c\033\uff8c" +
    "\001\002\000\016\005\uff8e\014\uff8e\030\uff8e\031\uff8e\032" +
    "\uff8e\033\uff8e\001\002\000\006\044\024\045\025\001\002" +
    "\000\022\052\060\053\057\054\065\055\064\056\066\060" +
    "\063\061\062\062\067\001\002\000\010\076\103\077\070" +
    "\100\125\001\002\000\004\014\143\001\002\000\022\052" +
    "\060\053\057\054\065\055\064\056\066\060\063\061\062" +
    "\062\067\001\002\000\022\052\uffa8\053\uffa8\054\uffa8\055" +
    "\uffa8\056\uffa8\060\uffa8\061\uffa8\062\uffa8\001\002\000\016" +
    "\005\110\014\114\030\105\031\126\032\132\033\107\001" +
    "\002\000\006\044\uff8d\045\uff8d\001\002\000\016\005\110" +
    "\014\114\030\105\031\126\032\132\033\107\001\002\000" +
    "\006\044\uff8b\045\uff8b\001\002\000\004\073\162\001\002" +
    "\000\130\005\uff94\010\uff94\011\uff94\012\uff94\014\uff94\015" +
    "\uff94\017\uff94\021\uff94\022\uff94\023\uff94\024\uff94\025\uff94" +
    "\026\uff94\027\uff94\030\uff94\031\uff94\032\uff94\033\uff94\044" +
    "\uff94\045\uff94\052\uff94\053\uff94\054\uff94\055\uff94\056\uff94" +
    "\057\uff94\060\uff94\061\uff94\062\uff94\065\uff94\066\uff94\067" +
    "\uff94\070\uff94\071\uff94\074\uff94\075\uff94\076\uff94\077\uff94" +
    "\100\uff94\101\uff94\102\uff94\103\uff94\104\uff94\001\002\000" +
    "\130\005\110\010\014\011\015\012\004\014\114\015\130" +
    "\017\013\021\012\022\041\023\045\024\046\025\042\026" +
    "\043\027\047\030\105\031\126\032\132\033\107\044\uffbc" +
    "\045\uffbc\052\uff96\053\uff96\054\uff96\055\uff96\056\uff96\057" +
    "\115\060\uff96\061\uff96\062\uff96\065\072\066\071\067\073" +
    "\070\106\071\116\074\104\075\113\076\103\077\070\100" +
    "\125\101\077\102\101\103\074\104\102\001\002\000\022" +
    "\052\uff93\053\uff93\054\uff93\055\uff93\056\uff93\060\uff93\061" +
    "\uff93\062\uff93\001\002\000\026\044\uff8a\045\uff8a\052\uff8a" +
    "\053\uff8a\054\uff8a\055\uff8a\056\uff8a\060\uff8a\061\uff8a\062" +
    "\uff8a\001\002\000\042\005\uff87\014\uff87\030\uff87\031\uff87" +
    "\032\uff87\033\uff87\044\uff85\045\uff85\052\uff85\053\uff85\054" +
    "\uff85\055\uff85\056\uff85\060\uff85\061\uff85\062\uff85\001\002" +
    "\000\042\005\uff89\014\uff89\030\uff89\031\uff89\032\uff89\033" +
    "\uff89\044\uff84\045\uff84\052\uff84\053\uff84\054\uff84\055\uff84" +
    "\056\uff84\060\uff84\061\uff84\062\uff84\001\002\000\016\005" +
    "\110\014\114\030\105\031\126\032\132\033\107\001\002" +
    "\000\026\044\uff88\045\uff88\052\uff88\053\uff88\054\uff88\055" +
    "\uff88\056\uff88\060\uff88\061\uff88\062\uff88\001\002\000\016" +
    "\005\110\014\114\030\105\031\126\032\132\033\107\001" +
    "\002\000\026\044\uff86\045\uff86\052\uff86\053\uff86\054\uff86" +
    "\055\uff86\056\uff86\060\uff86\061\uff86\062\uff86\001\002\000" +
    "\024\002\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056\uffad" +
    "\060\uffad\061\uffad\062\uffad\001\002\000\006\044\024\045" +
    "\025\001\002\000\022\052\060\053\057\054\065\055\064" +
    "\056\066\060\063\061\062\062\067\001\002\000\004\014" +
    "\200\001\002\000\022\052\uff98\053\uff98\054\uff98\055\uff98" +
    "\056\uff98\060\uff98\061\uff98\062\uff98\001\002\000\022\052" +
    "\060\053\057\054\065\055\064\056\066\060\063\061\062" +
    "\062\067\001\002\000\006\044\024\045\025\001\002\000" +
    "\004\064\204\001\002\000\022\052\uff97\053\uff97\054\uff97" +
    "\055\uff97\056\uff97\060\uff97\061\uff97\062\uff97\001\002\000" +
    "\006\044\024\045\025\001\002\000\004\015\207\001\002" +
    "\000\006\044\uff82\045\uff82\001\002\000\006\044\024\045" +
    "\025\001\002\000\022\052\060\053\057\054\065\055\064" +
    "\056\066\060\063\061\062\062\067\001\002\000\130\005" +
    "\110\010\014\011\015\012\004\014\114\015\130\017\013" +
    "\021\012\022\041\023\045\024\046\025\042\026\043\027" +
    "\047\030\105\031\126\032\132\033\107\044\uffbc\045\uffbc" +
    "\052\uff96\053\uff96\054\uff96\055\uff96\056\uff96\057\115\060" +
    "\uff96\061\uff96\062\uff96\065\072\066\071\067\073\070\106" +
    "\071\116\074\104\075\113\076\103\077\070\100\125\101" +
    "\077\102\101\103\074\104\102\001\002\000\022\052\060" +
    "\053\057\054\065\055\064\056\066\060\063\061\062\062" +
    "\067\001\002\000\026\044\uff81\045\uff81\052\uff81\053\uff81" +
    "\054\uff81\055\uff81\056\uff81\060\uff81\061\uff81\062\uff81\001" +
    "\002\000\130\005\110\010\014\011\015\012\004\014\114" +
    "\015\130\017\013\021\012\022\041\023\045\024\046\025" +
    "\042\026\043\027\047\030\105\031\126\032\132\033\107" +
    "\044\uffbc\045\uffbc\052\uff96\053\uff96\054\uff96\055\uff96\056" +
    "\uff96\057\115\060\uff96\061\uff96\062\uff96\065\072\066\071" +
    "\067\073\070\106\071\116\074\104\075\113\076\103\077" +
    "\070\100\125\101\077\102\101\103\074\104\102\001\002" +
    "\000\004\014\217\001\002\000\026\036\uff9f\037\uff9f\040" +
    "\uff9f\041\uff9f\042\uff9f\043\uff9f\046\uff9f\047\uff9f\050\uff9f" +
    "\051\uff9f\001\002\000\026\036\234\037\232\040\231\041" +
    "\222\042\224\043\230\046\221\047\233\050\227\051\225" +
    "\001\002\000\004\014\uffce\001\002\000\004\014\uffd4\001" +
    "\002\000\004\014\235\001\002\000\004\014\uffd3\001\002" +
    "\000\004\014\uffcb\001\002\000\004\014\uffd1\001\002\000" +
    "\004\014\uffcc\001\002\000\004\014\uffd2\001\002\000\004" +
    "\014\uffd5\001\002\000\004\014\uffd6\001\002\000\004\014" +
    "\uffcd\001\002\000\004\014\uffd7\001\002\000\006\044\uff9e" +
    "\045\uff9e\001\002\000\006\044\024\045\025\001\002\000" +
    "\022\052\060\053\057\054\065\055\064\056\066\060\063" +
    "\061\062\062\067\001\002\000\130\005\110\010\014\011" +
    "\015\012\004\014\114\015\130\017\013\021\012\022\041" +
    "\023\045\024\046\025\042\026\043\027\047\030\105\031" +
    "\126\032\132\033\107\044\uffbc\045\uffbc\052\uff96\053\uff96" +
    "\054\uff96\055\uff96\056\uff96\057\115\060\uff96\061\uff96\062" +
    "\uff96\065\072\066\071\067\073\070\106\071\116\074\104" +
    "\075\113\076\103\077\070\100\125\101\077\102\101\103" +
    "\074\104\102\001\002\000\022\052\060\053\057\054\065" +
    "\055\064\056\066\060\063\061\062\062\067\001\002\000" +
    "\130\005\110\010\014\011\015\012\004\014\114\015\130" +
    "\017\013\021\012\022\041\023\045\024\046\025\042\026" +
    "\043\027\047\030\105\031\126\032\132\033\107\044\uffbc" +
    "\045\uffbc\052\uff96\053\uff96\054\uff96\055\uff96\056\uff96\057" +
    "\115\060\uff96\061\uff96\062\uff96\065\072\066\071\067\073" +
    "\070\106\071\116\074\104\075\113\076\103\077\070\100" +
    "\125\101\077\102\101\103\074\104\102\001\002\000\022" +
    "\052\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\060\uff9d\061" +
    "\uff9d\062\uff9d\001\002\000\022\052\060\053\057\054\065" +
    "\055\064\056\066\060\063\061\062\062\067\001\002\000" +
    "\130\005\110\010\014\011\015\012\004\014\114\015\130" +
    "\017\013\021\012\022\041\023\045\024\046\025\042\026" +
    "\043\027\047\030\105\031\126\032\132\033\107\044\uffbc" +
    "\045\uffbc\052\uff96\053\uff96\054\uff96\055\uff96\056\uff96\057" +
    "\115\060\uff96\061\uff96\062\uff96\065\072\066\071\067\073" +
    "\070\106\071\116\074\104\075\113\076\103\077\070\100" +
    "\125\101\077\102\101\103\074\104\102\001\002\000\022" +
    "\052\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c\060\uff9c\061" +
    "\uff9c\062\uff9c\001\002\000\010\055\uffea\063\uffe7\064\254" +
    "\001\002\000\130\005\110\010\014\011\015\012\004\014" +
    "\114\015\130\017\013\021\012\022\041\023\045\024\046" +
    "\025\042\026\043\027\047\030\105\031\126\032\132\033" +
    "\107\044\uffbc\045\uffbc\052\uff96\053\uff96\054\uff96\055\uff96" +
    "\056\uff96\057\115\060\uff96\061\uff96\062\uff96\065\072\066" +
    "\071\067\073\070\106\071\116\074\104\075\113\076\103" +
    "\077\070\100\125\101\077\102\101\103\074\104\102\001" +
    "\002\000\012\010\014\011\015\012\004\014\247\001\002" +
    "\000\130\005\uffe4\010\uffe4\011\uffe4\012\uffe4\014\uffe4\015" +
    "\uffe4\017\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4" +
    "\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\044" +
    "\uffe4\045\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4" +
    "\057\uffe4\060\uffe4\061\uffe4\062\uffe4\065\uffe4\066\uffe4\067" +
    "\uffe4\070\uffe4\071\uffe4\074\uffe4\075\uffe4\076\uffe4\077\uffe4" +
    "\100\uffe4\101\uffe4\102\uffe4\103\uffe4\104\uffe4\001\002\000" +
    "\022\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2\060\uffa2" +
    "\061\uffa2\062\uffa2\001\002\000\130\005\uffeb\010\uffeb\011" +
    "\uffeb\012\uffeb\014\uffeb\015\uffeb\017\uffeb\021\uffeb\022\uffeb" +
    "\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031" +
    "\uffeb\032\uffeb\033\uffeb\044\uffeb\045\uffeb\052\uffeb\053\uffeb" +
    "\054\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062" +
    "\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb\071\uffeb\074\uffeb" +
    "\075\uffeb\076\uffeb\077\uffeb\100\uffeb\101\uffeb\102\uffeb\103" +
    "\uffeb\104\uffeb\001\002\000\004\063\262\001\002\000\004" +
    "\055\257\001\002\000\012\010\uffe9\011\uffe9\012\uffe9\014" +
    "\uffe9\001\002\000\012\010\014\011\015\012\004\014\247" +
    "\001\002\000\130\005\uffe8\010\uffe8\011\uffe8\012\uffe8\014" +
    "\uffe8\015\uffe8\017\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8" +
    "\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033" +
    "\uffe8\044\uffe8\045\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8" +
    "\056\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\065\uffe8\066" +
    "\uffe8\067\uffe8\070\uffe8\071\uffe8\074\uffe8\075\uffe8\076\uffe8" +
    "\077\uffe8\100\uffe8\101\uffe8\102\uffe8\103\uffe8\104\uffe8\001" +
    "\002\000\130\005\uffe6\010\uffe6\011\uffe6\012\uffe6\014\uffe6" +
    "\015\uffe6\017\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6" +
    "\044\uffe6\045\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056" +
    "\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\065\uffe6\066\uffe6" +
    "\067\uffe6\070\uffe6\071\uffe6\074\uffe6\075\uffe6\076\uffe6\077" +
    "\uffe6\100\uffe6\101\uffe6\102\uffe6\103\uffe6\104\uffe6\001\002" +
    "\000\130\005\uffdf\010\uffdf\011\uffdf\012\uffdf\014\uffdf\015" +
    "\uffdf\017\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf" +
    "\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\044" +
    "\uffdf\045\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf" +
    "\057\uffdf\060\uffdf\061\uffdf\062\uffdf\065\uffdf\066\uffdf\067" +
    "\265\070\uffdf\071\uffdf\074\uffdf\075\uffdf\076\uffdf\077\uffdf" +
    "\100\uffdf\101\uffdf\102\uffdf\103\uffdf\104\uffdf\001\002\000" +
    "\130\005\uffe5\010\uffe5\011\uffe5\012\uffe5\014\uffe5\015\uffe5" +
    "\017\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026" +
    "\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\044\uffe5" +
    "\045\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057" +
    "\uffe5\060\uffe5\061\uffe5\062\uffe5\065\uffe5\066\uffe5\067\uffe5" +
    "\070\uffe5\071\uffe5\074\uffe5\075\uffe5\076\uffe5\077\uffe5\100" +
    "\uffe5\101\uffe5\102\uffe5\103\uffe5\104\uffe5\001\002\000\004" +
    "\014\uffe3\001\002\000\004\014\267\001\002\000\006\044" +
    "\uffe2\045\uffe2\001\002\000\006\044\024\045\025\001\002" +
    "\000\004\014\272\001\002\000\006\044\uffe1\045\uffe1\001" +
    "\002\000\006\044\024\045\025\001\002\000\130\005\uffe0" +
    "\010\uffe0\011\uffe0\012\uffe0\014\uffe0\015\uffe0\017\uffe0\021" +
    "\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0" +
    "\030\uffe0\031\uffe0\032\uffe0\033\uffe0\044\uffe0\045\uffe0\052" +
    "\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0" +
    "\061\uffe0\062\uffe0\065\uffe0\066\uffe0\067\uffe0\070\uffe0\071" +
    "\uffe0\074\uffe0\075\uffe0\076\uffe0\077\uffe0\100\uffe0\101\uffe0" +
    "\102\uffe0\103\uffe0\104\uffe0\001\002\000\130\005\110\010" +
    "\014\011\015\012\004\014\114\015\130\017\013\021\012" +
    "\022\041\023\045\024\046\025\042\026\043\027\047\030" +
    "\105\031\126\032\132\033\107\044\uffbc\045\uffbc\052\uff96" +
    "\053\uff96\054\uff96\055\uff96\056\uff96\057\115\060\uff96\061" +
    "\uff96\062\uff96\065\072\066\071\067\073\070\106\071\116" +
    "\074\104\075\113\076\103\077\070\100\125\101\077\102" +
    "\101\103\074\104\102\001\002\000\004\014\277\001\002" +
    "\000\026\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043" +
    "\uffac\046\uffac\047\uffac\050\uffac\051\uffac\001\002\000\026" +
    "\036\234\037\232\040\231\041\222\042\224\043\230\046" +
    "\221\047\233\050\227\051\225\001\002\000\004\014\302" +
    "\001\002\000\006\044\uffab\045\uffab\001\002\000\006\044" +
    "\024\045\025\001\002\000\022\052\060\053\057\054\065" +
    "\055\064\056\066\060\063\061\062\062\067\001\002\000" +
    "\130\005\110\010\014\011\015\012\004\014\114\015\130" +
    "\017\013\021\012\022\041\023\045\024\046\025\042\026" +
    "\043\027\047\030\105\031\126\032\132\033\107\044\uffbc" +
    "\045\uffbc\052\uff96\053\uff96\054\uff96\055\uff96\056\uff96\057" +
    "\115\060\uff96\061\uff96\062\uff96\065\072\066\071\067\073" +
    "\070\106\071\116\074\104\075\113\076\103\077\070\100" +
    "\125\101\077\102\101\103\074\104\102\001\002\000\022" +
    "\052\060\053\057\054\065\055\064\056\066\060\063\061" +
    "\062\062\067\001\002\000\130\005\110\010\014\011\015" +
    "\012\004\014\114\015\130\017\013\021\012\022\041\023" +
    "\045\024\046\025\042\026\043\027\047\030\105\031\126" +
    "\032\132\033\107\044\uffbc\045\uffbc\052\uff96\053\uff96\054" +
    "\uff96\055\uff96\056\uff96\057\115\060\uff96\061\uff96\062\uff96" +
    "\065\072\066\071\067\073\070\106\071\116\074\104\075" +
    "\113\076\103\077\070\100\125\101\077\102\101\103\074" +
    "\104\102\001\002\000\022\052\uffaa\053\uffaa\054\uffaa\055" +
    "\uffaa\056\uffaa\060\uffaa\061\uffaa\062\uffaa\001\002\000\022" +
    "\052\060\053\057\054\065\055\064\056\066\060\063\061" +
    "\062\062\067\001\002\000\130\005\110\010\014\011\015" +
    "\012\004\014\114\015\130\017\013\021\012\022\041\023" +
    "\045\024\046\025\042\026\043\027\047\030\105\031\126" +
    "\032\132\033\107\044\uffbc\045\uffbc\052\uff96\053\uff96\054" +
    "\uff96\055\uff96\056\uff96\057\115\060\uff96\061\uff96\062\uff96" +
    "\065\072\066\071\067\073\070\106\071\116\074\104\075" +
    "\113\076\103\077\070\100\125\101\077\102\101\103\074" +
    "\104\102\001\002\000\022\052\uffa9\053\uffa9\054\uffa9\055" +
    "\uffa9\056\uffa9\060\uffa9\061\uffa9\062\uffa9\001\002\000\022" +
    "\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\060\uffa5\061" +
    "\uffa5\062\uffa5\001\002\000\004\014\316\001\002\000\006" +
    "\044\uffa7\045\uffa7\001\002\000\006\044\024\045\025\001" +
    "\002\000\006\063\322\064\323\001\002\000\022\052\uffa6" +
    "\053\uffa6\054\uffa6\055\uffa6\056\uffa6\060\uffa6\061\uffa6\062" +
    "\uffa6\001\002\000\022\052\uffc2\053\uffc2\054\uffc2\055\uffc2" +
    "\056\uffc2\060\uffc2\061\uffc2\062\uffc2\001\002\000\022\052" +
    "\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1\060\uffc1\061\uffc1" +
    "\062\uffc1\001\002\000\006\013\uffb1\016\uffb1\001\002\000" +
    "\006\013\052\016\050\001\002\000\004\014\327\001\002" +
    "\000\022\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\060" +
    "\uffb0\061\uffb0\062\uffb0\001\002\000\022\052\060\053\057" +
    "\054\065\055\064\056\066\060\063\061\062\062\067\001" +
    "\002\000\130\005\110\010\014\011\015\012\004\014\114" +
    "\015\130\017\013\021\012\022\041\023\045\024\046\025" +
    "\042\026\043\027\047\030\105\031\126\032\132\033\107" +
    "\044\uffbc\045\uffbc\052\uff96\053\uff96\054\uff96\055\uff96\056" +
    "\uff96\057\115\060\uff96\061\uff96\062\uff96\065\072\066\071" +
    "\067\073\070\106\071\116\074\104\075\113\076\103\077" +
    "\070\100\125\101\077\102\101\103\074\104\102\001\002" +
    "\000\022\052\060\053\057\054\065\055\064\056\066\060" +
    "\063\061\062\062\067\001\002\000\024\002\uffaf\052\uffaf" +
    "\053\uffaf\054\uffaf\055\uffaf\056\uffaf\060\uffaf\061\uffaf\062" +
    "\uffaf\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\331\000\012\002\010\003\007\017\006\032\004\001" +
    "\001\000\002\001\001\000\006\020\050\033\043\001\001" +
    "\000\004\041\022\001\001\000\012\002\021\003\007\017" +
    "\006\032\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\027\001\001\000\002\001\001\000" +
    "\004\043\031\001\001\000\002\001\001\000\004\044\033" +
    "\001\001\000\004\025\034\001\001\000\002\001\001\000" +
    "\004\045\036\001\001\000\006\003\037\032\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\057\053\001\001\000\004" +
    "\025\054\001\001\000\004\025\055\001\001\000\004\027" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\121\004\117\005\116\012\111\014\130\017\126\020" +
    "\077\023\122\031\074\032\004\034\075\035\123\036\110" +
    "\037\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\314" +
    "\001\001\000\006\025\275\027\274\001\001\000\002\001" +
    "\001\000\006\021\247\032\250\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\025\215\027\214\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\075\204\001\001\000\004" +
    "\065\174\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\164\001\001\000\004\025\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\121\004\141" +
    "\005\116\012\111\014\130\017\126\020\077\023\122\031" +
    "\074\032\004\034\075\035\123\036\110\037\120\001\001" +
    "\000\006\010\134\023\133\001\001\000\036\003\121\004" +
    "\132\005\116\012\111\014\130\017\126\020\077\023\122" +
    "\031\074\032\004\034\075\035\123\036\110\037\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\137\023\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\067\160\001\001\000\004\016" +
    "\146\001\001\000\004\072\156\001\001\000\004\071\154" +
    "\001\001\000\004\025\147\001\001\000\004\027\150\001" +
    "\001\000\006\005\152\035\151\001\001\000\002\001\001" +
    "\000\004\027\153\001\001\000\002\001\001\000\006\012" +
    "\155\023\122\001\001\000\002\001\001\000\006\012\157" +
    "\023\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\070\162\001\001\000\036\003\121\004\163\005\116" +
    "\012\111\014\130\017\126\020\077\023\122\031\074\032" +
    "\004\034\075\035\123\036\110\037\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\074\171\001\001\000" +
    "\004\073\167\001\001\000\006\012\170\023\122\001\001" +
    "\000\002\001\001\000\006\012\172\023\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\175\001\001" +
    "\000\004\027\176\001\001\000\002\001\001\000\004\066" +
    "\200\001\001\000\004\027\201\001\001\000\004\025\202" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\205\001\001\000\002\001\001\000\004\076\207\001\001" +
    "\000\004\025\210\001\001\000\004\027\211\001\001\000" +
    "\036\003\121\004\212\005\116\012\111\014\130\017\126" +
    "\020\077\023\122\031\074\032\004\034\075\035\123\036" +
    "\110\037\120\001\001\000\004\027\213\001\001\000\002" +
    "\001\001\000\036\003\121\004\243\005\116\012\111\014" +
    "\130\017\126\020\077\023\122\031\074\032\004\034\075" +
    "\035\123\036\110\037\120\001\001\000\002\001\001\000" +
    "\004\063\217\001\001\000\006\024\222\026\225\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\064\235" +
    "\001\001\000\004\025\236\001\001\000\004\027\237\001" +
    "\001\000\036\003\121\004\240\005\116\012\111\014\130" +
    "\017\126\020\077\023\122\031\074\032\004\034\075\035" +
    "\123\036\110\037\120\001\001\000\004\027\241\001\001" +
    "\000\036\003\121\004\242\005\116\012\111\014\130\017" +
    "\126\020\077\023\122\031\074\032\004\034\075\035\123" +
    "\036\110\037\120\001\001\000\002\001\001\000\004\027" +
    "\244\001\001\000\036\003\121\004\245\005\116\012\111" +
    "\014\130\017\126\020\077\023\122\031\074\032\004\034" +
    "\075\035\123\036\110\037\120\001\001\000\002\001\001" +
    "\000\006\046\255\050\254\001\001\000\036\003\121\004" +
    "\252\005\116\012\111\014\130\017\126\020\077\023\122" +
    "\031\074\032\004\034\075\035\123\036\110\037\120\001" +
    "\001\000\006\021\251\032\250\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\257\001\001\000\006\021\260" +
    "\032\250\001\001\000\002\001\001\000\004\051\262\001" +
    "\001\000\004\040\263\001\001\000\002\001\001\000\004" +
    "\052\265\001\001\000\002\001\001\000\004\053\267\001" +
    "\001\000\004\025\270\001\001\000\002\001\001\000\004" +
    "\054\272\001\001\000\004\025\273\001\001\000\002\001" +
    "\001\000\036\003\121\004\310\005\116\012\111\014\130" +
    "\017\126\020\077\023\122\031\074\032\004\034\075\035" +
    "\123\036\110\037\120\001\001\000\002\001\001\000\004" +
    "\060\277\001\001\000\006\024\300\026\225\001\001\000" +
    "\002\001\001\000\004\061\302\001\001\000\004\025\303" +
    "\001\001\000\004\027\304\001\001\000\036\003\121\004" +
    "\305\005\116\012\111\014\130\017\126\020\077\023\122" +
    "\031\074\032\004\034\075\035\123\036\110\037\120\001" +
    "\001\000\004\027\306\001\001\000\036\003\121\004\307" +
    "\005\116\012\111\014\130\017\126\020\077\023\122\031" +
    "\074\032\004\034\075\035\123\036\110\037\120\001\001" +
    "\000\002\001\001\000\004\027\311\001\001\000\036\003" +
    "\121\004\312\005\116\012\111\014\130\017\126\020\077" +
    "\023\122\031\074\032\004\034\075\035\123\036\110\037" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\062\316\001\001\000\004\025\317\001" +
    "\001\000\004\030\320\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\055\324\001\001\000" +
    "\004\033\325\001\001\000\002\001\001\000\004\056\327" +
    "\001\001\000\004\027\330\001\001\000\036\003\121\004" +
    "\331\005\116\012\111\014\130\017\126\020\077\023\122" +
    "\031\074\032\004\034\075\035\123\036\110\037\120\001" +
    "\001\000\004\027\332\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParseCodigo$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParseCodigo$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParseCodigo$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



/**Metodo al que se llama automáticamente ante algún error sintactico.*/
public void syntax_error(Symbol s){
System.out.println("Error en la Línea " + (s.right+1) +" Columna "+s.left+ " Identificador " +s.value + " no reconocido." );
}
/**Metodo al que se llama en el momento en que ya no es posible una recuperación de errores.*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
System.out.println("Error en la Línea " + (s.right+1)+ "Columna "+s.left+". Identificador " + s.value + " no reconocido.");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParseCodigo$actions {


/*
public static Stack pilaCodigo= new Stack();
public static Stack erroresCodigo= new Stack();
public static Stack programa= new Stack();

*/
public void datos(Object copiado){
programa.push(copiado);

}


  private final ParseCodigo parser;

  /** Constructor */
  CUP$ParseCodigo$actions(ParseCodigo parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParseCodigo$do_action(
    int                        CUP$ParseCodigo$act_num,
    java_cup.runtime.lr_parser CUP$ParseCodigo$parser,
    java.util.Stack            CUP$ParseCodigo$stack,
    int                        CUP$ParseCodigo$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParseCodigo$result;

      /* select the action based on the action number */
      switch (CUP$ParseCodigo$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Linea8 ::= Tk_name NT$28 LineaAgrupa Tk_Puntos NT$29 LineaAgrupa LineaGen Linea2 LineaGen 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-8)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-5)).value;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea8",8, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-8)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NT$29 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
datos(a);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("NT$29",60, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$28 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("NT$28",59, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Linea9 ::= Tk_Puntos 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea9",9, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Linea9 ::= Tk_name 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea9",9, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Linea9 ::= Tk_name NT$27 Linea8 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).value;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea9",9, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$27 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("NT$27",58, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Linea9 ::= Tk_Puntos NT$26 Linea8 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).value;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea9",9, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$26 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("NT$26",57, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Linea8 ::= LineaOpera Linea9 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea8",8, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Operaciones2 ::= Tk_name NT$25 Linea8 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).value;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Operaciones2",12, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$25 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("NT$25",56, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Operaciones2 ::= Tk_Puntos NT$24 Linea8 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).value;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Operaciones2",12, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$24 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("NT$24",55, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Linea7 ::= Tk_Puntos Tk_puntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);datos(a);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea7",7, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Linea7 ::= Tk_Puntos Linea6 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea7",7, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Linea6 ::= LineaOpera Linea7 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea6",6, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Operaciones ::= Tk_Puntos Linea6 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Operaciones",10, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Linea3 ::= LineaSenteCaso Tk_name NT$22 Tk_Dosp NT$23 Linea2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).value;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea3",3, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-5)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$23 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
datos(a);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("NT$23",54, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$22 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("NT$22",53, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Linea2 ::= 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea2",2, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Linea2 ::= Tk_print NT$20 LineaAgrupa LineaGen Tk_name NT$21 LineaGen LineaAgrupa Tk_puntoComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-8)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(c);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea2",2, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-8)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$21 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
datos(a);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("NT$21",52, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$20 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("NT$20",51, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Linea2 ::= Linea3 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea2",2, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Linea2 ::= Linea8 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea2",2, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Linea2 ::= LineaSenteMien LineaGen Linea2 LineaGen Linea2 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea2",2, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-4)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Linea2 ::= LineaSenteMien LineaAgrupa Tk_name NT$18 LineaRela Tk_name NT$19 LineaAgrupa LineaGen Linea2 LineaGen Linea2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-9)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-6)).value;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea2",2, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-11)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$19 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
datos(a);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("NT$19",50, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$18 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("NT$18",49, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Linea2 ::= LineaSenteConti 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea2",2, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Linea2 ::= Operaciones Linea2 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea2",2, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Linea2 ::= LineaVar LineaVar1 Linea2 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea2",2, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Linea2 ::= LineaComen Linea2 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea2",2, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Linea2 ::= Linea1 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea2",2, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Linea2 ::= LineaMetod Tk_name 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea2",2, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Linea2 ::= LineaMetod LineaAgrupa Tk_name NT$17 LineaAgrupa LineaAsig 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-3)).value;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea2",2, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-5)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$17 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("NT$17",48, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Linea2 ::= LineaSenteCaso LineaAgrupa Operaciones2 LineaAgrupa LineaGen Linea3 LineaGen 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea2",2, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-6)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Linea2 ::= LineaSenteSi LineaGen Linea2 LineaGen Linea2 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea2",2, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-4)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Linea2 ::= LineaSenteSi LineaAgrupa Tk_name NT$15 LineaRela Tk_name NT$16 LineaAgrupa LineaGen Linea2 LineaGen Linea2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-9)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-6)).value;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea2",2, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-11)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$16 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
datos(a);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("NT$16",47, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$15 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("NT$15",46, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Linea1 ::= LineaVisi LineaVar Tk_name NT$14 LineaAgrupa LineaAgrupa LineaGen Linea2 LineaGen 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-6)).value;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea1",1, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-8)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$14 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("NT$14",45, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Linea1 ::= LineaVisi LineaCyH Tk_name NT$12 LineaCyH Tk_name NT$13 LineaGen Linea2 LineaGen 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-4)).value;
		JOptionPane.showMessageDialog(null, "Copilacion Exitosa ", "Copilacion", JOptionPane.WARNING_MESSAGE);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea1",1, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-9)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
datos(a);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("NT$13",44, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$12 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("NT$12",43, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LineaSenteConti ::= Tk_Exit 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaSenteConti",29, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LineaSenteConti ::= TK_Continuar 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaSenteConti",29, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LineaSenteMien ::= Tk_Hacer 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaSenteMien",28, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LineaSenteMien ::= Tk_Mientras 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaSenteMien",28, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LineaSenteCaso ::= Tk_Defec 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaSenteCaso",27, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LineaSenteCaso ::= Tk_Caso 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaSenteCaso",27, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LineaSenteCaso ::= Tk_Inter 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaSenteCaso",27, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LineaSenteSi ::= Tk_SiNo 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaSenteSi",26, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LineaSenteSi ::= Tk_SiNoSi 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaSenteSi",26, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LineaSenteSi ::= Tk_Si 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaSenteSi",26, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LineaMetod ::= 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaMetod",23, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LineaMetod ::= Tk_Firts 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaMetod",23, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LineaMetod ::= Tk_new 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaMetod",23, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LineaMetod ::= Tk_Over 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaMetod",23, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LineaMetod ::= Tk_Super 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaMetod",23, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LineaAsig ::= Tk_puntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaAsig",22, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LineaAsig ::= Tk_Asig 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaAsig",22, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LineaGen ::= Tk_false 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaGen",21, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LineaGen ::= Tk_true 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaGen",21, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LineaGen ::= Tk_mientras 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaGen",21, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LineaGen ::= Tk_Igual 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaGen",21, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LineaGen ::= Tk_Coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaGen",21, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LineaGen ::= Tk_Close 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaGen",21, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LineaGen ::= Tk_Open 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaGen",21, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LineaGen ::= Tk_Comillas 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaGen",21, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LineaLog ::= Tk_And 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaLog",20, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LineaLog ::= Tk_xOr 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaLog",20, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LineaLog ::= Tk_Or 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaLog",20, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LineaLog ::= Tk_Not 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaLog",20, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LineaAgrupa ::= Tk_Cerrar 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaAgrupa",19, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LineaAgrupa ::= Tk_Abrir 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaAgrupa",19, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LineaRela ::= LineaLog 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaRela",18, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LineaRela ::= Tk_dif 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaRela",18, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LineaRela ::= Tk_igualIgual 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaRela",18, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LineaRela ::= Tk_menorq 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaRela",18, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LineaRela ::= Tk_mayorq 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaRela",18, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LineaRela ::= Tk_menor 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaRela",18, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LineaRela ::= Tk_mayor 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaRela",18, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LineaConta ::= Tk_name Tk_minus Tk_puntoComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(a);datos(c);datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaConta",16, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LineaConta ::= Tk_name Tk_plus Tk_puntoComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(a);datos(c);datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaConta",16, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LineaOpera ::= Tk_multi 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaOpera",17, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LineaOpera ::= Tk_pote 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaOpera",17, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LineaOpera ::= Tk_div 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaOpera",17, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LineaOpera ::= Tk_resta 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaOpera",17, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LineaOpera ::= Tk_suma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaOpera",17, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LineaVar2 ::= 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVar2",30, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LineaVar2 ::= Tk_new NT$9 Tk_name NT$10 LineaAgrupa Tk_name NT$11 LineaAgrupa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).value;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVar2",30, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-7)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("NT$11",42, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
datos(c);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("NT$10",41, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$9 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
datos(a);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("NT$9",40, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LineaVar1 ::= LineaVisi LineaVar1 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVar1",15, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LineaVar1 ::= Tk_name NT$7 Tk_Asig NT$8 LineaVar2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).value;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVar1",15, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-4)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("NT$8",39, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$7 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
datos(a);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("NT$7",38, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LineaVar1 ::= Tk_name NT$5 Tk_Coma NT$6 LineaVar1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).value;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVar1",15, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-4)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("NT$6",37, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$5 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
datos(a);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("NT$5",36, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LineaVar1 ::= Tk_name Tk_puntoComa 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(a);datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVar1",15, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LineaVar ::= Tk_void 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVar",14, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LineaVar ::= Tk_char 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVar",14, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LineaVar ::= Tk_int 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVar",14, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LineaVar ::= Tk_bool 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVar",14, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LineaVar ::= Tk_double 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVar",14, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LineaVar ::= Tk_string 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVar",14, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LineaComen ::= Tk_OpenC Tk_name Tk_CloseC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(a);datos(t);datos(c);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaComen",13, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LineaComen ::= Tk_DobleB Tk_name 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(a);datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaComen",13, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LineaCyH ::= Tk_clase 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaCyH",25, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LineaCyH ::= Tk_heredar 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaCyH",25, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LineaVisi ::= Tk_protect 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVisi",24, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LineaVisi ::= Tk_private 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVisi",24, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LineaVisi ::= Tk_public 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
		datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVisi",24, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Linea0 ::= LineaComen Linea0 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea0",0, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Linea0 ::= Linea1 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea0",0, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Linea0 ::= Tk_import NT$0 LineaAgrupa Tk_Comillas NT$1 Tk_name NT$2 Tk_Comillas NT$3 LineaAgrupa Tk_puntoComa NT$4 Linea1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-12)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-12)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-12)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).value;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea0",0, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-12)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-10)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-10)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-10)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
datos(e);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("NT$4",35, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
datos(c);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("NT$3",34, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
datos(b);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("NT$2",33, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
datos(a);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("NT$1",32, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.peek()).value;
datos(t);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("NT$0",31, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Linea0 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).value;
		RESULT = start_val;
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParseCodigo$parser.done_parsing();
          return CUP$ParseCodigo$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

