
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Feb 09 19:41:34 CST 2016
//----------------------------------------------------

package ArchivosCodigo;

import java.io.*;
import java_cup.runtime.*;
import java.util.*;
import javax.swing.JOptionPane;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Feb 09 19:41:34 CST 2016
  */
public class ParseCodigo extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParseCodigo() {super();}

  /** Constructor which sets the default scanner. */
  public ParseCodigo(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParseCodigo(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\004\000\002\002\012\000\002\002" +
    "\003\000\002\002\004\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\022\003\000\002\022\003\000" +
    "\002\006\004\000\002\006\005\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\010\004\000\002\010\005" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\013\003" +
    "\000\002\013\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\016\003\000\002\016\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\003\011\000\002\003\011\000\002" +
    "\004\010\000\002\004\003\000\002\004\004\000\002\004" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\016\004\006\007\014\010\015\011\004\015" +
    "\013\017\012\001\002\000\022\012\ufffb\014\ufffb\020\ufffb" +
    "\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\001\002\000" +
    "\022\012\045\014\043\020\034\021\040\022\041\023\035" +
    "\024\036\025\042\001\002\000\006\042\023\043\024\001" +
    "\002\000\016\004\006\007\014\010\015\011\004\015\013" +
    "\017\012\001\002\000\004\002\uffff\001\002\000\004\002" +
    "\021\001\002\000\004\013\017\001\002\000\004\013\016" +
    "\001\002\000\022\012\ufffd\014\ufffd\020\ufffd\021\ufffd\022" +
    "\ufffd\023\ufffd\024\ufffd\025\ufffd\001\002\000\022\012\ufffc" +
    "\014\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025" +
    "\ufffc\001\002\000\056\004\ufff8\007\ufff8\010\ufff8\011\ufff8" +
    "\015\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024" +
    "\ufff8\025\ufff8\067\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8" +
    "\075\ufff8\076\ufff8\077\ufff8\100\ufff8\101\ufff8\001\002\000" +
    "\004\070\020\001\002\000\056\004\ufff7\007\ufff7\010\ufff7" +
    "\011\ufff7\015\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023" +
    "\ufff7\024\ufff7\025\ufff7\067\ufff7\071\ufff7\072\ufff7\073\ufff7" +
    "\074\ufff7\075\ufff7\076\ufff7\077\ufff7\100\ufff7\101\ufff7\001" +
    "\002\000\004\002\001\001\002\000\004\002\ufffe\001\002" +
    "\000\034\013\uffe2\042\uffe2\043\uffe2\050\uffe2\051\uffe2\052" +
    "\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2" +
    "\062\uffe2\001\002\000\034\013\uffe1\042\uffe1\043\uffe1\050" +
    "\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1" +
    "\057\uffe1\060\uffe1\062\uffe1\001\002\000\004\050\026\001" +
    "\002\000\004\013\027\001\002\000\004\050\030\001\002" +
    "\000\006\042\023\043\024\001\002\000\004\062\032\001" +
    "\002\000\010\007\014\010\015\011\004\001\002\000\004" +
    "\002\000\001\002\000\004\013\ufff6\001\002\000\004\013" +
    "\ufff3\001\002\000\004\013\ufff2\001\002\000\004\013\123" +
    "\001\002\000\004\013\ufff5\001\002\000\004\013\ufff4\001" +
    "\002\000\004\013\ufff1\001\002\000\004\013\ufffa\001\002" +
    "\000\004\013\046\001\002\000\004\013\ufff9\001\002\000" +
    "\006\042\023\043\024\001\002\000\006\042\023\043\024" +
    "\001\002\000\024\050\052\051\051\052\060\053\057\054" +
    "\061\055\053\056\056\057\055\060\062\001\002\000\054" +
    "\007\uffdb\010\uffdb\011\uffdb\015\uffdb\017\uffdb\020\uffdb\021" +
    "\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\067\uffdb\071\uffdb" +
    "\072\uffdb\073\uffdb\074\uffdb\075\uffdb\076\uffdb\077\uffdb\100" +
    "\uffdb\101\uffdb\001\002\000\054\007\uffdc\010\uffdc\011\uffdc" +
    "\015\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024" +
    "\uffdc\025\uffdc\067\uffdc\071\uffdc\072\uffdc\073\uffdc\074\uffdc" +
    "\075\uffdc\076\uffdc\077\uffdc\100\uffdc\101\uffdc\001\002\000" +
    "\054\007\uffd7\010\uffd7\011\uffd7\015\uffd7\017\uffd7\020\uffd7" +
    "\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\067\uffd7\071" +
    "\uffd7\072\uffd7\073\uffd7\074\uffd7\075\uffd7\076\uffd7\077\uffd7" +
    "\100\uffd7\101\uffd7\001\002\000\054\007\014\010\015\011" +
    "\004\015\013\017\012\020\034\021\040\022\041\023\035" +
    "\024\036\025\042\067\071\071\075\072\073\073\066\074" +
    "\067\075\072\076\076\077\070\100\101\101\077\001\002" +
    "\000\054\007\uffd5\010\uffd5\011\uffd5\015\uffd5\017\uffd5\020" +
    "\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\067\uffd5" +
    "\071\uffd5\072\uffd5\073\uffd5\074\uffd5\075\uffd5\076\uffd5\077" +
    "\uffd5\100\uffd5\101\uffd5\001\002\000\054\007\uffd6\010\uffd6" +
    "\011\uffd6\015\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023" +
    "\uffd6\024\uffd6\025\uffd6\067\uffd6\071\uffd6\072\uffd6\073\uffd6" +
    "\074\uffd6\075\uffd6\076\uffd6\077\uffd6\100\uffd6\101\uffd6\001" +
    "\002\000\054\007\uffd9\010\uffd9\011\uffd9\015\uffd9\017\uffd9" +
    "\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\067" +
    "\uffd9\071\uffd9\072\uffd9\073\uffd9\074\uffd9\075\uffd9\076\uffd9" +
    "\077\uffd9\100\uffd9\101\uffd9\001\002\000\054\007\uffda\010" +
    "\uffda\011\uffda\015\uffda\017\uffda\020\uffda\021\uffda\022\uffda" +
    "\023\uffda\024\uffda\025\uffda\067\uffda\071\uffda\072\uffda\073" +
    "\uffda\074\uffda\075\uffda\076\uffda\077\uffda\100\uffda\101\uffda" +
    "\001\002\000\054\007\uffd8\010\uffd8\011\uffd8\015\uffd8\017" +
    "\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8" +
    "\067\uffd8\071\uffd8\072\uffd8\073\uffd8\074\uffd8\075\uffd8\076" +
    "\uffd8\077\uffd8\100\uffd8\101\uffd8\001\002\000\054\007\uffd4" +
    "\010\uffd4\011\uffd4\015\uffd4\017\uffd4\020\uffd4\021\uffd4\022" +
    "\uffd4\023\uffd4\024\uffd4\025\uffd4\067\uffd4\071\uffd4\072\uffd4" +
    "\073\uffd4\074\uffd4\075\uffd4\076\uffd4\077\uffd4\100\uffd4\101" +
    "\uffd4\001\002\000\004\013\116\001\002\000\004\002\uffc2" +
    "\001\002\000\004\002\uffc0\001\002\000\006\042\uffca\043" +
    "\uffca\001\002\000\006\042\uffc9\043\uffc9\001\002\000\006" +
    "\042\uffc6\043\uffc6\001\002\000\006\042\uffcd\043\uffcd\001" +
    "\002\000\006\042\uffc8\043\uffc8\001\002\000\006\042\uffcb" +
    "\043\uffcb\001\002\000\054\007\014\010\015\011\004\015" +
    "\013\017\012\020\034\021\040\022\041\023\035\024\036" +
    "\025\042\067\071\071\075\072\073\073\066\074\067\075" +
    "\072\076\076\077\070\100\101\101\077\001\002\000\006" +
    "\042\uffcc\043\uffcc\001\002\000\006\042\uffc7\043\uffc7\001" +
    "\002\000\006\042\uffc4\043\uffc4\001\002\000\006\042\023" +
    "\043\024\001\002\000\006\042\uffc5\043\uffc5\001\002\000" +
    "\004\013\103\001\002\000\016\034\111\035\107\036\106" +
    "\037\112\040\110\041\104\001\002\000\024\050\uffe3\051" +
    "\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3" +
    "\060\uffe3\001\002\000\024\050\052\051\051\052\060\053" +
    "\057\054\061\055\053\056\056\057\055\060\062\001\002" +
    "\000\024\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055" +
    "\uffe6\056\uffe6\057\uffe6\060\uffe6\001\002\000\024\050\uffe7" +
    "\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057" +
    "\uffe7\060\uffe7\001\002\000\024\050\uffe4\051\uffe4\052\uffe4" +
    "\053\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\001" +
    "\002\000\024\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8" +
    "\055\uffe8\056\uffe8\057\uffe8\060\uffe8\001\002\000\024\050" +
    "\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5" +
    "\057\uffe5\060\uffe5\001\002\000\054\007\014\010\015\011" +
    "\004\015\013\017\012\020\034\021\040\022\041\023\035" +
    "\024\036\025\042\067\071\071\075\072\073\073\066\074" +
    "\067\075\072\076\076\077\070\100\101\101\077\001\002" +
    "\000\004\002\uffc1\001\002\000\004\002\uffbf\001\002\000" +
    "\006\053\120\062\121\001\002\000\004\002\uffbe\001\002" +
    "\000\004\013\116\001\002\000\004\002\ufff0\001\002\000" +
    "\004\002\uffef\001\002\000\006\012\045\014\043\001\002" +
    "\000\004\013\125\001\002\000\024\050\052\051\051\052" +
    "\060\053\057\054\061\055\053\056\056\057\055\060\062" +
    "\001\002\000\054\007\014\010\015\011\004\015\013\017" +
    "\012\020\034\021\040\022\041\023\035\024\036\025\042" +
    "\067\071\071\075\072\073\073\066\074\067\075\072\076" +
    "\076\077\070\100\101\101\077\001\002\000\004\002\uffc3" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\012\002\010\003\007\006\006\021\004\001" +
    "\001\000\002\001\001\000\006\007\043\022\036\001\001" +
    "\000\004\013\024\001\001\000\012\002\021\003\007\006" +
    "\006\021\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\030\001\001\000\002\001" +
    "\001\000\006\003\032\021\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\046\001\001\000\004\013\047\001\001" +
    "\000\004\015\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\064\004\063\006\073" +
    "\007\062\020\077\021\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\064\004\114\006\073" +
    "\007\062\020\077\021\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\104\001" +
    "\001\000\002\001\001\000\004\015\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\064\004\113\006\073" +
    "\007\062\020\077\021\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\123\001\001\000\002\001\001\000\004\015\125" +
    "\001\001\000\016\003\064\004\126\006\073\007\062\020" +
    "\077\021\004\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParseCodigo$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParseCodigo$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParseCodigo$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



/**Metodo al que se llama automáticamente ante algún error sintactico.*/
public void syntax_error(Symbol s){
System.out.println("Error en la Línea " + (s.right+1) +" Columna "+s.left+ " Identificador " +s.value + " no reconocido." );
}
/**Metodo al que se llama en el momento en que ya no es posible una recuperación de errores.*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
System.out.println("Error en la Línea " + (s.right+1)+ "Columna "+s.left+". Identificador " + s.value + " no reconocido.");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParseCodigo$actions {


/*
static Stack pilaCodigo= new Stack();
static Stack erroresCodigo= new Stack();
*/

  private final ParseCodigo parser;

  /** Constructor */
  CUP$ParseCodigo$actions(ParseCodigo parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParseCodigo$do_action(
    int                        CUP$ParseCodigo$act_num,
    java_cup.runtime.lr_parser CUP$ParseCodigo$parser,
    java.util.Stack            CUP$ParseCodigo$stack,
    int                        CUP$ParseCodigo$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParseCodigo$result;

      /* select the action based on the action number */
      switch (CUP$ParseCodigo$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Linea2 ::= LineaVar LineaVar1 
            {
              Object RESULT =null;
		JOptionPane.showMessageDialog(null, "Copilacion Exitosa ", "Copilacion", JOptionPane.WARNING_MESSAGE);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea2",2, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Linea2 ::= LineaComen Linea2 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea2",2, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Linea2 ::= Linea1 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea2",2, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Linea2 ::= LineaSente LineaAgrupa Tk_name LineaRela LineaGen Linea2 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea2",2, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-5)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Linea1 ::= LineaVisi LineaVar Tk_name LineaAgrupa LineaAgrupa LineaGen Linea2 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea1",1, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-6)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Linea1 ::= LineaVisi LineaCyH Tk_name LineaCyH Tk_name LineaGen Linea2 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea1",1, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-6)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LineaSente ::= Tk_Exit 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaSente",14, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LineaSente ::= TK_Continuar 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaSente",14, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LineaSente ::= Tk_Hacer 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaSente",14, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LineaSente ::= Tk_Mientras 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaSente",14, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LineaSente ::= Tk_Defec 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaSente",14, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LineaSente ::= Tk_Caso 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaSente",14, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LineaSente ::= Tk_Inter 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaSente",14, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LineaSente ::= Tk_SiNo 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaSente",14, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LineaSente ::= Tk_SiNoSi 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaSente",14, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LineaSente ::= Tk_Si 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaSente",14, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LineaMetod ::= Tk_Firts 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaMetod",13, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LineaMetod ::= Tk_new 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaMetod",13, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LineaMetod ::= Tk_Over 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaMetod",13, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LineaMetod ::= Tk_Super 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaMetod",13, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LineaAsig ::= Tk_puntoComa 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaAsig",12, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LineaAsig ::= Tk_Asig 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaAsig",12, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LineaGen ::= Tk_false 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaGen",11, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LineaGen ::= Tk_true 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaGen",11, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LineaGen ::= Tk_mientras 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaGen",11, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LineaGen ::= Tk_print 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaGen",11, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LineaGen ::= Tk_Igual 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaGen",11, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LineaGen ::= Tk_Coma 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaGen",11, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LineaGen ::= Tk_Close 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaGen",11, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LineaGen ::= Tk_Open 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaGen",11, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LineaGen ::= Tk_Comillas 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaGen",11, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LineaLog ::= Tk_And 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaLog",10, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LineaLog ::= Tk_xOr 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaLog",10, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LineaLog ::= Tk_Or 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaLog",10, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LineaLog ::= Tk_Not 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaLog",10, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LineaAgrupa ::= Tk_Cerrar 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaAgrupa",9, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LineaAgrupa ::= Tk_Abrir 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaAgrupa",9, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LineaRela ::= Tk_dif 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaRela",8, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LineaRela ::= Tk_igualIgual 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaRela",8, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LineaRela ::= Tk_menorq 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaRela",8, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LineaRela ::= Tk_mayorq 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaRela",8, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LineaRela ::= Tk_menor 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaRela",8, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LineaRela ::= Tk_mayor 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaRela",8, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LineaOpera ::= Tk_minus 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaOpera",7, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LineaOpera ::= Tk_plus 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaOpera",7, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LineaOpera ::= Tk_multi 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaOpera",7, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LineaOpera ::= Tk_div 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaOpera",7, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LineaOpera ::= Tk_resta 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaOpera",7, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LineaOpera ::= Tk_suma 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaOpera",7, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LineaVar1 ::= Tk_name Tk_Coma LineaVar1 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVar1",6, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LineaVar1 ::= Tk_name Tk_puntoComa 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVar1",6, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LineaVar ::= Tk_void 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVar",5, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LineaVar ::= Tk_char 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVar",5, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LineaVar ::= Tk_int 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVar",5, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LineaVar ::= Tk_bool 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVar",5, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LineaVar ::= Tk_double 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVar",5, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LineaVar ::= Tk_string 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVar",5, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LineaComen ::= Tk_OpenC Tk_name Tk_CloseC 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaComen",4, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LineaComen ::= Tk_DobleB Tk_name 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaComen",4, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LineaCyH ::= Tk_clase 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaCyH",16, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LineaCyH ::= Tk_heredar 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaCyH",16, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LineaVisi ::= Tk_protect 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVisi",15, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LineaVisi ::= Tk_private 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVisi",15, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LineaVisi ::= Tk_public 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVisi",15, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Linea0 ::= LineaComen Linea0 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea0",0, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Linea0 ::= Linea1 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea0",0, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Linea0 ::= Tk_import LineaAgrupa Tk_Comillas Tk_name Tk_Comillas LineaAgrupa Tk_puntoComa Linea1 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea0",0, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-7)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Linea0 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).value;
		RESULT = start_val;
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParseCodigo$parser.done_parsing();
          return CUP$ParseCodigo$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

