
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Feb 13 22:34:49 CST 2016
//----------------------------------------------------

package ArchivosCodigo;

import java.io.*;
import java_cup.runtime.*;
import java.util.*;
import javax.swing.JOptionPane;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Feb 13 22:34:49 CST 2016
  */
public class ParseCodigo extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParseCodigo() {super();}

  /** Constructor which sets the default scanner. */
  public ParseCodigo(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParseCodigo(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\004\000\002\002\012\000\002\002" +
    "\003\000\002\002\004\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\033\003\000\002\033\003\000" +
    "\002\017\004\000\002\017\005\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\021\004\000\002\021\005" +
    "\000\002\021\005\000\002\021\004\000\002\040\007\000" +
    "\002\040\002\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\022" +
    "\005\000\002\022\005\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\025\003\000\002" +
    "\025\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\030\003\000\002\030\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\002" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\036\003\000\002\036\003\000\002\037\003\000\002\037" +
    "\003\000\002\003\012\000\002\003\012\000\002\004\014" +
    "\000\002\004\007\000\002\004\011\000\002\004\007\000" +
    "\002\004\004\000\002\004\003\000\002\004\004\000\002" +
    "\004\005\000\002\004\004\000\002\004\003\000\002\004" +
    "\014\000\002\004\007\000\002\004\003\000\002\004\003" +
    "\000\002\004\011\000\002\004\002\000\002\005\006\000" +
    "\002\014\004\000\002\010\004\000\002\011\004\000\002" +
    "\011\004\000\002\016\004\000\002\016\004\000\002\012" +
    "\004\000\002\013\004\000\002\013\004\000\002\013\003" +
    "\000\002\013\003\000\002\012\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\273\000\016\004\006\010\014\011\015\012\004\017" +
    "\013\021\012\001\002\000\032\010\ufffb\011\ufffb\012\ufffb" +
    "\013\ufffb\014\ufffb\016\ufffb\022\ufffb\023\ufffb\024\ufffb\025" +
    "\ufffb\026\ufffb\027\ufffb\001\002\000\022\013\045\016\043" +
    "\022\034\023\040\024\041\025\035\026\036\027\042\001" +
    "\002\000\006\044\023\045\024\001\002\000\016\004\006" +
    "\010\014\011\015\012\004\017\013\021\012\001\002\000" +
    "\004\002\uffff\001\002\000\004\002\021\001\002\000\004" +
    "\014\017\001\002\000\004\014\016\001\002\000\032\010" +
    "\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\016\ufffd\022\ufffd" +
    "\023\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\001\002\000" +
    "\032\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\016\ufffc" +
    "\022\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\001" +
    "\002\000\132\004\ufff8\005\ufff8\010\ufff8\011\ufff8\012\ufff8" +
    "\014\ufff8\015\ufff8\017\ufff8\021\ufff8\022\ufff8\023\ufff8\024" +
    "\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8" +
    "\033\ufff8\044\ufff8\045\ufff8\052\ufff8\053\ufff8\054\ufff8\055" +
    "\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\065\ufff8" +
    "\066\ufff8\067\ufff8\070\ufff8\071\ufff8\074\ufff8\075\ufff8\076" +
    "\ufff8\077\ufff8\100\ufff8\101\ufff8\102\ufff8\103\ufff8\104\ufff8" +
    "\001\002\000\004\072\020\001\002\000\132\004\ufff7\005" +
    "\ufff7\010\ufff7\011\ufff7\012\ufff7\014\ufff7\015\ufff7\017\ufff7" +
    "\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027" +
    "\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\044\ufff7\045\ufff7" +
    "\052\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\060" +
    "\ufff7\061\ufff7\062\ufff7\065\ufff7\066\ufff7\067\ufff7\070\ufff7" +
    "\071\ufff7\074\ufff7\075\ufff7\076\ufff7\077\ufff7\100\ufff7\101" +
    "\ufff7\102\ufff7\103\ufff7\104\ufff7\001\002\000\004\002\001" +
    "\001\002\000\004\002\ufffe\001\002\000\134\005\uffdc\010" +
    "\uffdc\011\uffdc\012\uffdc\014\uffdc\015\uffdc\017\uffdc\021\uffdc" +
    "\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030" +
    "\uffdc\031\uffdc\032\uffdc\033\uffdc\044\uffdc\045\uffdc\052\uffdc" +
    "\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061" +
    "\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc" +
    "\070\uffdc\071\uffdc\074\uffdc\075\uffdc\076\uffdc\077\uffdc\100" +
    "\uffdc\101\uffdc\102\uffdc\103\uffdc\104\uffdc\001\002\000\134" +
    "\005\uffdb\010\uffdb\011\uffdb\012\uffdb\014\uffdb\015\uffdb\017" +
    "\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb" +
    "\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\044\uffdb\045" +
    "\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb" +
    "\060\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb\066" +
    "\uffdb\067\uffdb\070\uffdb\071\uffdb\074\uffdb\075\uffdb\076\uffdb" +
    "\077\uffdb\100\uffdb\101\uffdb\102\uffdb\103\uffdb\104\uffdb\001" +
    "\002\000\004\052\026\001\002\000\004\014\027\001\002" +
    "\000\004\052\030\001\002\000\006\044\023\045\024\001" +
    "\002\000\004\064\032\001\002\000\010\010\014\011\015" +
    "\012\004\001\002\000\004\002\000\001\002\000\012\010" +
    "\ufff6\011\ufff6\012\ufff6\014\ufff6\001\002\000\012\010\ufff3" +
    "\011\ufff3\012\ufff3\014\ufff3\001\002\000\012\010\ufff2\011" +
    "\ufff2\012\ufff2\014\ufff2\001\002\000\004\014\270\001\002" +
    "\000\012\010\ufff5\011\ufff5\012\ufff5\014\ufff5\001\002\000" +
    "\012\010\ufff4\011\ufff4\012\ufff4\014\ufff4\001\002\000\012" +
    "\010\ufff1\011\ufff1\012\ufff1\014\ufff1\001\002\000\004\014" +
    "\ufffa\001\002\000\004\014\046\001\002\000\004\014\ufff9" +
    "\001\002\000\006\044\023\045\024\001\002\000\006\044" +
    "\023\045\024\001\002\000\022\052\052\053\051\054\057" +
    "\055\055\056\060\060\056\061\054\062\061\001\002\000" +
    "\132\002\uffd5\005\uffd5\010\uffd5\011\uffd5\012\uffd5\014\uffd5" +
    "\015\uffd5\017\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025" +
    "\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\044\uffd5\045\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056" +
    "\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5\065\uffd5\066\uffd5" +
    "\067\uffd5\070\uffd5\071\uffd5\074\uffd5\075\uffd5\076\uffd5\077" +
    "\uffd5\100\uffd5\101\uffd5\102\uffd5\103\uffd5\104\uffd5\001\002" +
    "\000\132\002\uffd6\005\uffd6\010\uffd6\011\uffd6\012\uffd6\014" +
    "\uffd6\015\uffd6\017\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6" +
    "\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033" +
    "\uffd6\044\uffd6\045\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6" +
    "\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\065\uffd6\066" +
    "\uffd6\067\uffd6\070\uffd6\071\uffd6\074\uffd6\075\uffd6\076\uffd6" +
    "\077\uffd6\100\uffd6\101\uffd6\102\uffd6\103\uffd6\104\uffd6\001" +
    "\002\000\130\005\102\010\014\011\015\012\004\014\106" +
    "\015\122\017\013\021\012\022\034\023\040\024\041\025" +
    "\035\026\036\027\042\030\077\031\120\032\124\033\101" +
    "\044\uffc8\045\uffc8\052\uffac\053\uffac\054\uffac\055\uffac\056" +
    "\uffac\057\105\060\uffac\061\uffac\062\uffac\065\064\066\063" +
    "\067\065\070\100\071\110\074\076\075\107\076\075\077" +
    "\062\100\116\101\071\102\073\103\066\104\074\001\002" +
    "\000\132\002\uffd0\005\uffd0\010\uffd0\011\uffd0\012\uffd0\014" +
    "\uffd0\015\uffd0\017\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0" +
    "\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033" +
    "\uffd0\044\uffd0\045\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0" +
    "\056\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\065\uffd0\066" +
    "\uffd0\067\uffd0\070\uffd0\071\uffd0\074\uffd0\075\uffd0\076\uffd0" +
    "\077\uffd0\100\uffd0\101\uffd0\102\uffd0\103\uffd0\104\uffd0\001" +
    "\002\000\132\002\uffd3\005\uffd3\010\uffd3\011\uffd3\012\uffd3" +
    "\014\uffd3\015\uffd3\017\uffd3\021\uffd3\022\uffd3\023\uffd3\024" +
    "\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3" +
    "\033\uffd3\044\uffd3\045\uffd3\052\uffd3\053\uffd3\054\uffd3\055" +
    "\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3\065\uffd3" +
    "\066\uffd3\067\uffd3\070\uffd3\071\uffd3\074\uffd3\075\uffd3\076" +
    "\uffd3\077\uffd3\100\uffd3\101\uffd3\102\uffd3\103\uffd3\104\uffd3" +
    "\001\002\000\132\002\uffd1\005\uffd1\010\uffd1\011\uffd1\012" +
    "\uffd1\014\uffd1\015\uffd1\017\uffd1\021\uffd1\022\uffd1\023\uffd1" +
    "\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032" +
    "\uffd1\033\uffd1\044\uffd1\045\uffd1\052\uffd1\053\uffd1\054\uffd1" +
    "\055\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\065" +
    "\uffd1\066\uffd1\067\uffd1\070\uffd1\071\uffd1\074\uffd1\075\uffd1" +
    "\076\uffd1\077\uffd1\100\uffd1\101\uffd1\102\uffd1\103\uffd1\104" +
    "\uffd1\001\002\000\132\002\uffd4\005\uffd4\010\uffd4\011\uffd4" +
    "\012\uffd4\014\uffd4\015\uffd4\017\uffd4\021\uffd4\022\uffd4\023" +
    "\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4" +
    "\032\uffd4\033\uffd4\044\uffd4\045\uffd4\052\uffd4\053\uffd4\054" +
    "\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4" +
    "\065\uffd4\066\uffd4\067\uffd4\070\uffd4\071\uffd4\074\uffd4\075" +
    "\uffd4\076\uffd4\077\uffd4\100\uffd4\101\uffd4\102\uffd4\103\uffd4" +
    "\104\uffd4\001\002\000\132\002\uffd2\005\uffd2\010\uffd2\011" +
    "\uffd2\012\uffd2\014\uffd2\015\uffd2\017\uffd2\021\uffd2\022\uffd2" +
    "\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031" +
    "\uffd2\032\uffd2\033\uffd2\044\uffd2\045\uffd2\052\uffd2\053\uffd2" +
    "\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062" +
    "\uffd2\065\uffd2\066\uffd2\067\uffd2\070\uffd2\071\uffd2\074\uffd2" +
    "\075\uffd2\076\uffd2\077\uffd2\100\uffd2\101\uffd2\102\uffd2\103" +
    "\uffd2\104\uffd2\001\002\000\132\002\uffcf\005\uffcf\010\uffcf" +
    "\011\uffcf\012\uffcf\014\uffcf\015\uffcf\017\uffcf\021\uffcf\022" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\033\uffcf\044\uffcf\045\uffcf\052\uffcf\053" +
    "\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf" +
    "\062\uffcf\065\uffcf\066\uffcf\067\uffcf\070\uffcf\071\uffcf\074" +
    "\uffcf\075\uffcf\076\uffcf\077\uffcf\100\uffcf\101\uffcf\102\uffcf" +
    "\103\uffcf\104\uffcf\001\002\000\010\014\uffc3\044\uffc3\045" +
    "\uffc3\001\002\000\010\014\uffcb\044\uffcb\045\uffcb\001\002" +
    "\000\010\014\uffcc\044\uffcc\045\uffcc\001\002\000\010\014" +
    "\uffca\044\uffca\045\uffca\001\002\000\022\052\uffbf\053\uffbf" +
    "\054\uffbf\055\uffbf\056\uffbf\060\uffbf\061\uffbf\062\uffbf\001" +
    "\002\000\010\014\261\044\023\045\024\001\002\000\026" +
    "\044\023\045\024\052\052\053\051\054\057\055\055\056" +
    "\060\060\056\061\054\062\061\001\002\000\026\044\uffc1" +
    "\045\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1\060" +
    "\uffc1\061\uffc1\062\uffc1\001\002\000\012\010\014\011\015" +
    "\012\004\014\225\001\002\000\026\044\uffc0\045\uffc0\052" +
    "\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\060\uffc0\061\uffc0" +
    "\062\uffc0\001\002\000\022\052\uffbe\053\uffbe\054\uffbe\055" +
    "\uffbe\056\uffbe\060\uffbe\061\uffbe\062\uffbe\001\002\000\010" +
    "\014\uffc4\044\uffc4\045\uffc4\001\002\000\026\044\uffc6\045" +
    "\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\060\uffc6" +
    "\061\uffc6\062\uffc6\001\002\000\006\014\uffea\015\uffea\001" +
    "\002\000\010\014\uffc9\044\uffc9\045\uffc9\001\002\000\006" +
    "\014\uffe6\015\uffe6\001\002\000\006\014\uffe7\015\uffe7\001" +
    "\002\000\026\044\023\045\024\052\052\053\051\054\057" +
    "\055\055\056\060\060\056\061\054\062\061\001\002\000" +
    "\022\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\060\uffaf" +
    "\061\uffaf\062\uffaf\001\002\000\006\044\023\045\024\001" +
    "\002\000\006\044\023\045\024\001\002\000\026\044\uffc5" +
    "\045\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\060" +
    "\uffc5\061\uffc5\062\uffc5\001\002\000\026\044\uffc7\045\uffc7" +
    "\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\060\uffc7\061" +
    "\uffc7\062\uffc7\001\002\000\022\052\uffae\053\uffae\054\uffae" +
    "\055\uffae\056\uffae\060\uffae\061\uffae\062\uffae\001\002\000" +
    "\022\052\052\053\051\054\057\055\055\056\060\060\056" +
    "\061\054\062\061\001\002\000\022\052\uffb2\053\uffb2\054" +
    "\uffb2\055\uffb2\056\uffb2\060\uffb2\061\uffb2\062\uffb2\001\002" +
    "\000\022\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\060" +
    "\uffb6\061\uffb6\062\uffb6\001\002\000\006\014\154\015\155" +
    "\001\002\000\010\014\uffc2\044\uffc2\045\uffc2\001\002\000" +
    "\010\014\135\044\023\045\024\001\002\000\006\014\uffe9" +
    "\015\uffe9\001\002\000\130\005\102\010\014\011\015\012" +
    "\004\014\106\015\122\017\013\021\012\022\034\023\040" +
    "\024\041\025\035\026\036\027\042\030\077\031\120\032" +
    "\124\033\101\044\uffc8\045\uffc8\052\uffac\053\uffac\054\uffac" +
    "\055\uffac\056\uffac\057\105\060\uffac\061\uffac\062\uffac\065" +
    "\064\066\063\067\065\070\100\071\110\074\076\075\107" +
    "\076\075\077\062\100\116\101\071\102\073\103\066\104" +
    "\074\001\002\000\014\005\102\030\077\031\120\032\124" +
    "\033\101\001\002\000\130\005\102\010\014\011\015\012" +
    "\004\014\106\015\122\017\013\021\012\022\034\023\040" +
    "\024\041\025\035\026\036\027\042\030\077\031\120\032" +
    "\124\033\101\044\uffc8\045\uffc8\052\uffac\053\uffac\054\uffac" +
    "\055\uffac\056\uffac\057\105\060\uffac\061\uffac\062\uffac\065" +
    "\064\066\063\067\065\070\100\071\110\074\076\075\107" +
    "\076\075\077\062\100\116\101\071\102\073\103\066\104" +
    "\074\001\002\000\006\014\uffe8\015\uffe8\001\002\000\022" +
    "\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\060\uffb3\061" +
    "\uffb3\062\uffb3\001\002\000\004\015\131\001\002\000\130" +
    "\005\uffaa\010\uffaa\011\uffaa\012\uffaa\014\uffaa\015\uffaa\017" +
    "\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa" +
    "\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\044\uffaa\045" +
    "\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa" +
    "\060\uffaa\061\uffaa\062\uffaa\065\uffaa\066\uffaa\067\uffaa\070" +
    "\uffaa\071\uffaa\074\uffaa\075\uffaa\076\uffaa\077\uffaa\100\uffaa" +
    "\101\uffaa\102\uffaa\103\uffaa\104\uffaa\001\002\000\130\005" +
    "\uffa9\010\uffa9\011\uffa9\012\uffa9\014\uffa9\015\uffa9\017\uffa9" +
    "\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027" +
    "\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\044\uffa9\045\uffa9" +
    "\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9\060" +
    "\uffa9\061\uffa9\062\uffa9\065\uffa9\066\uffa9\067\uffa9\070\uffa9" +
    "\071\uffa9\074\uffa9\075\uffa9\076\uffa9\077\uffa9\100\uffa9\101" +
    "\uffa9\102\uffa9\103\uffa9\104\uffa9\001\002\000\016\005\102" +
    "\030\077\031\120\032\124\033\101\064\133\001\002\000" +
    "\130\005\uffa8\010\uffa8\011\uffa8\012\uffa8\014\uffa8\015\uffa8" +
    "\017\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026" +
    "\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\044\uffa8" +
    "\045\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\057" +
    "\uffa8\060\uffa8\061\uffa8\062\uffa8\065\uffa8\066\uffa8\067\uffa8" +
    "\070\uffa8\071\uffa8\074\uffa8\075\uffa8\076\uffa8\077\uffa8\100" +
    "\uffa8\101\uffa8\102\uffa8\103\uffa8\104\uffa8\001\002\000\130" +
    "\005\uffa7\010\uffa7\011\uffa7\012\uffa7\014\uffa7\015\uffa7\017" +
    "\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7" +
    "\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\044\uffa7\045" +
    "\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7" +
    "\060\uffa7\061\uffa7\062\uffa7\065\uffa7\066\uffa7\067\uffa7\070" +
    "\uffa7\071\uffa7\074\uffa7\075\uffa7\076\uffa7\077\uffa7\100\uffa7" +
    "\101\uffa7\102\uffa7\103\uffa7\104\uffa7\001\002\000\022\052" +
    "\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\060\uffb5\061\uffb5" +
    "\062\uffb5\001\002\000\004\073\151\001\002\000\006\014" +
    "\137\015\140\001\002\000\016\005\102\014\106\030\077" +
    "\031\120\032\124\033\101\001\002\000\016\005\102\014" +
    "\106\030\077\031\120\032\124\033\101\001\002\000\006" +
    "\044\023\045\024\001\002\000\022\052\052\053\051\054" +
    "\057\055\055\056\060\060\056\061\054\062\061\001\002" +
    "\000\010\076\075\077\062\100\116\001\002\000\004\014" +
    "\135\001\002\000\022\052\052\053\051\054\057\055\055" +
    "\056\060\060\056\061\054\062\061\001\002\000\022\052" +
    "\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\060\uffb9\061\uffb9" +
    "\062\uffb9\001\002\000\006\044\uffa6\045\uffa6\001\002\000" +
    "\006\044\uffa5\045\uffa5\001\002\000\130\005\102\010\014" +
    "\011\015\012\004\014\106\015\122\017\013\021\012\022" +
    "\034\023\040\024\041\025\035\026\036\027\042\030\077" +
    "\031\120\032\124\033\101\044\uffc8\045\uffc8\052\uffac\053" +
    "\uffac\054\uffac\055\uffac\056\uffac\057\105\060\uffac\061\uffac" +
    "\062\uffac\065\064\066\063\067\065\070\100\071\110\074" +
    "\076\075\107\076\075\077\062\100\116\101\071\102\073" +
    "\103\066\104\074\001\002\000\022\052\uffab\053\uffab\054" +
    "\uffab\055\uffab\056\uffab\060\uffab\061\uffab\062\uffab\001\002" +
    "\000\026\044\uffa4\045\uffa4\052\uffa4\053\uffa4\054\uffa4\055" +
    "\uffa4\056\uffa4\060\uffa4\061\uffa4\062\uffa4\001\002\000\042" +
    "\005\102\014\106\030\077\031\120\032\124\033\101\044" +
    "\uffa1\045\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1" +
    "\060\uffa1\061\uffa1\062\uffa1\001\002\000\042\005\102\014" +
    "\106\030\077\031\120\032\124\033\101\044\uffa0\045\uffa0" +
    "\052\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\060\uffa0\061" +
    "\uffa0\062\uffa0\001\002\000\026\044\uffa3\045\uffa3\052\uffa3" +
    "\053\uffa3\054\uffa3\055\uffa3\056\uffa3\060\uffa3\061\uffa3\062" +
    "\uffa3\001\002\000\026\044\uffa2\045\uffa2\052\uffa2\053\uffa2" +
    "\054\uffa2\055\uffa2\056\uffa2\060\uffa2\061\uffa2\062\uffa2\001" +
    "\002\000\024\002\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc" +
    "\056\uffbc\060\uffbc\061\uffbc\062\uffbc\001\002\000\004\015" +
    "\162\001\002\000\006\044\023\045\024\001\002\000\022" +
    "\052\052\053\051\054\057\055\055\056\060\060\056\061" +
    "\054\062\061\001\002\000\130\005\102\010\014\011\015" +
    "\012\004\014\106\015\122\017\013\021\012\022\034\023" +
    "\040\024\041\025\035\026\036\027\042\030\077\031\120" +
    "\032\124\033\101\044\uffc8\045\uffc8\052\uffac\053\uffac\054" +
    "\uffac\055\uffac\056\uffac\057\105\060\uffac\061\uffac\062\uffac" +
    "\065\064\066\063\067\065\070\100\071\110\074\076\075" +
    "\107\076\075\077\062\100\116\101\071\102\073\103\066" +
    "\104\074\001\002\000\022\052\052\053\051\054\057\055" +
    "\055\056\060\060\056\061\054\062\061\001\002\000\026" +
    "\044\uff9f\045\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f\056" +
    "\uff9f\060\uff9f\061\uff9f\062\uff9f\001\002\000\022\052\052" +
    "\053\051\054\057\055\055\056\060\060\056\061\054\062" +
    "\061\001\002\000\004\014\171\001\002\000\022\052\052" +
    "\053\051\054\057\055\055\056\060\060\056\061\054\062" +
    "\061\001\002\000\006\044\023\045\024\001\002\000\004" +
    "\064\174\001\002\000\022\052\uffad\053\uffad\054\uffad\055" +
    "\uffad\056\uffad\060\uffad\061\uffad\062\uffad\001\002\000\130" +
    "\005\102\010\014\011\015\012\004\014\106\015\122\017" +
    "\013\021\012\022\034\023\040\024\041\025\035\026\036" +
    "\027\042\030\077\031\120\032\124\033\101\044\uffc8\045" +
    "\uffc8\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac\057\105" +
    "\060\uffac\061\uffac\062\uffac\065\064\066\063\067\065\070" +
    "\100\071\110\074\076\075\107\076\075\077\062\100\116" +
    "\101\071\102\073\103\066\104\074\001\002\000\004\014" +
    "\177\001\002\000\026\036\212\037\211\040\210\041\201" +
    "\042\203\043\207\046\200\047\213\050\205\051\204\001" +
    "\002\000\004\014\uffda\001\002\000\004\014\uffe0\001\002" +
    "\000\004\014\214\001\002\000\004\014\uffdf\001\002\000" +
    "\004\014\uffd7\001\002\000\004\014\uffd8\001\002\000\004" +
    "\014\uffdd\001\002\000\004\014\uffde\001\002\000\004\014" +
    "\uffe1\001\002\000\004\014\uffe2\001\002\000\004\014\uffe3" +
    "\001\002\000\004\014\uffd9\001\002\000\006\044\023\045" +
    "\024\001\002\000\022\052\052\053\051\054\057\055\055" +
    "\056\060\060\056\061\054\062\061\001\002\000\130\005" +
    "\102\010\014\011\015\012\004\014\106\015\122\017\013" +
    "\021\012\022\034\023\040\024\041\025\035\026\036\027" +
    "\042\030\077\031\120\032\124\033\101\044\uffc8\045\uffc8" +
    "\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac\057\105\060" +
    "\uffac\061\uffac\062\uffac\065\064\066\063\067\065\070\100" +
    "\071\110\074\076\075\107\076\075\077\062\100\116\101" +
    "\071\102\073\103\066\104\074\001\002\000\022\052\052" +
    "\053\051\054\057\055\055\056\060\060\056\061\054\062" +
    "\061\001\002\000\130\005\102\010\014\011\015\012\004" +
    "\014\106\015\122\017\013\021\012\022\034\023\040\024" +
    "\041\025\035\026\036\027\042\030\077\031\120\032\124" +
    "\033\101\044\uffc8\045\uffc8\052\uffac\053\uffac\054\uffac\055" +
    "\uffac\056\uffac\057\105\060\uffac\061\uffac\062\uffac\065\064" +
    "\066\063\067\065\070\100\071\110\074\076\075\107\076" +
    "\075\077\062\100\116\101\071\102\073\103\066\104\074" +
    "\001\002\000\022\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056" +
    "\uffb1\060\uffb1\061\uffb1\062\uffb1\001\002\000\022\052\052" +
    "\053\051\054\057\055\055\056\060\060\056\061\054\062" +
    "\061\001\002\000\130\005\102\010\014\011\015\012\004" +
    "\014\106\015\122\017\013\021\012\022\034\023\040\024" +
    "\041\025\035\026\036\027\042\030\077\031\120\032\124" +
    "\033\101\044\uffc8\045\uffc8\052\uffac\053\uffac\054\uffac\055" +
    "\uffac\056\uffac\057\105\060\uffac\061\uffac\062\uffac\065\064" +
    "\066\063\067\065\070\100\071\110\074\076\075\107\076" +
    "\075\077\062\100\116\101\071\102\073\103\066\104\074" +
    "\001\002\000\022\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056" +
    "\uffb0\060\uffb0\061\uffb0\062\uffb0\001\002\000\010\055\233" +
    "\063\232\064\234\001\002\000\130\005\102\010\014\011" +
    "\015\012\004\014\106\015\122\017\013\021\012\022\034" +
    "\023\040\024\041\025\035\026\036\027\042\030\077\031" +
    "\120\032\124\033\101\044\uffc8\045\uffc8\052\uffac\053\uffac" +
    "\054\uffac\055\uffac\056\uffac\057\105\060\uffac\061\uffac\062" +
    "\uffac\065\064\066\063\067\065\070\100\071\110\074\076" +
    "\075\107\076\075\077\062\100\116\101\071\102\073\103" +
    "\066\104\074\001\002\000\012\010\014\011\015\012\004" +
    "\014\225\001\002\000\130\005\uffed\010\uffed\011\uffed\012" +
    "\uffed\014\uffed\015\uffed\017\uffed\021\uffed\022\uffed\023\uffed" +
    "\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032" +
    "\uffed\033\uffed\044\uffed\045\uffed\052\uffed\053\uffed\054\uffed" +
    "\055\uffed\056\uffed\057\uffed\060\uffed\061\uffed\062\uffed\065" +
    "\uffed\066\uffed\067\uffed\070\uffed\071\uffed\074\uffed\075\uffed" +
    "\076\uffed\077\uffed\100\uffed\101\uffed\102\uffed\103\uffed\104" +
    "\uffed\001\002\000\022\052\uffb4\053\uffb4\054\uffb4\055\uffb4" +
    "\056\uffb4\060\uffb4\061\uffb4\062\uffb4\001\002\000\130\005" +
    "\uffeb\010\uffeb\011\uffeb\012\uffeb\014\uffeb\015\uffeb\017\uffeb" +
    "\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027" +
    "\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\044\uffeb\045\uffeb" +
    "\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb\060" +
    "\uffeb\061\uffeb\062\uffeb\065\uffeb\066\uffeb\067\237\070\uffeb" +
    "\071\uffeb\074\uffeb\075\uffeb\076\uffeb\077\uffeb\100\uffeb\101" +
    "\uffeb\102\uffeb\103\uffeb\104\uffeb\001\002\000\012\010\014" +
    "\011\015\012\004\014\225\001\002\000\130\005\ufff0\010" +
    "\ufff0\011\ufff0\012\ufff0\014\ufff0\015\ufff0\017\ufff0\021\ufff0" +
    "\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030" +
    "\ufff0\031\ufff0\032\ufff0\033\ufff0\044\ufff0\045\ufff0\052\ufff0" +
    "\053\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0\061" +
    "\ufff0\062\ufff0\065\ufff0\066\ufff0\067\ufff0\070\ufff0\071\ufff0" +
    "\074\ufff0\075\ufff0\076\ufff0\077\ufff0\100\ufff0\101\ufff0\102" +
    "\ufff0\103\ufff0\104\ufff0\001\002\000\130\005\uffef\010\uffef" +
    "\011\uffef\012\uffef\014\uffef\015\uffef\017\uffef\021\uffef\022" +
    "\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef" +
    "\031\uffef\032\uffef\033\uffef\044\uffef\045\uffef\052\uffef\053" +
    "\uffef\054\uffef\055\uffef\056\uffef\057\uffef\060\uffef\061\uffef" +
    "\062\uffef\065\uffef\066\uffef\067\uffef\070\uffef\071\uffef\074" +
    "\uffef\075\uffef\076\uffef\077\uffef\100\uffef\101\uffef\102\uffef" +
    "\103\uffef\104\uffef\001\002\000\130\005\uffee\010\uffee\011" +
    "\uffee\012\uffee\014\uffee\015\uffee\017\uffee\021\uffee\022\uffee" +
    "\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031" +
    "\uffee\032\uffee\033\uffee\044\uffee\045\uffee\052\uffee\053\uffee" +
    "\054\uffee\055\uffee\056\uffee\057\uffee\060\uffee\061\uffee\062" +
    "\uffee\065\uffee\066\uffee\067\uffee\070\uffee\071\uffee\074\uffee" +
    "\075\uffee\076\uffee\077\uffee\100\uffee\101\uffee\102\uffee\103" +
    "\uffee\104\uffee\001\002\000\004\014\240\001\002\000\006" +
    "\044\023\045\024\001\002\000\004\014\242\001\002\000" +
    "\006\044\023\045\024\001\002\000\130\005\uffec\010\uffec" +
    "\011\uffec\012\uffec\014\uffec\015\uffec\017\uffec\021\uffec\022" +
    "\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec" +
    "\031\uffec\032\uffec\033\uffec\044\uffec\045\uffec\052\uffec\053" +
    "\uffec\054\uffec\055\uffec\056\uffec\057\uffec\060\uffec\061\uffec" +
    "\062\uffec\065\uffec\066\uffec\067\uffec\070\uffec\071\uffec\074" +
    "\uffec\075\uffec\076\uffec\077\uffec\100\uffec\101\uffec\102\uffec" +
    "\103\uffec\104\uffec\001\002\000\130\005\102\010\014\011" +
    "\015\012\004\014\106\015\122\017\013\021\012\022\034" +
    "\023\040\024\041\025\035\026\036\027\042\030\077\031" +
    "\120\032\124\033\101\044\uffc8\045\uffc8\052\uffac\053\uffac" +
    "\054\uffac\055\uffac\056\uffac\057\105\060\uffac\061\uffac\062" +
    "\uffac\065\064\066\063\067\065\070\100\071\110\074\076" +
    "\075\107\076\075\077\062\100\116\101\071\102\073\103" +
    "\066\104\074\001\002\000\004\014\246\001\002\000\026" +
    "\036\212\037\211\040\210\041\201\042\203\043\207\046" +
    "\200\047\213\050\205\051\204\001\002\000\004\014\250" +
    "\001\002\000\006\044\023\045\024\001\002\000\022\052" +
    "\052\053\051\054\057\055\055\056\060\060\056\061\054" +
    "\062\061\001\002\000\130\005\102\010\014\011\015\012" +
    "\004\014\106\015\122\017\013\021\012\022\034\023\040" +
    "\024\041\025\035\026\036\027\042\030\077\031\120\032" +
    "\124\033\101\044\uffc8\045\uffc8\052\uffac\053\uffac\054\uffac" +
    "\055\uffac\056\uffac\057\105\060\uffac\061\uffac\062\uffac\065" +
    "\064\066\063\067\065\070\100\071\110\074\076\075\107" +
    "\076\075\077\062\100\116\101\071\102\073\103\066\104" +
    "\074\001\002\000\022\052\052\053\051\054\057\055\055" +
    "\056\060\060\056\061\054\062\061\001\002\000\130\005" +
    "\102\010\014\011\015\012\004\014\106\015\122\017\013" +
    "\021\012\022\034\023\040\024\041\025\035\026\036\027" +
    "\042\030\077\031\120\032\124\033\101\044\uffc8\045\uffc8" +
    "\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac\057\105\060" +
    "\uffac\061\uffac\062\uffac\065\064\066\063\067\065\070\100" +
    "\071\110\074\076\075\107\076\075\077\062\100\116\101" +
    "\071\102\073\103\066\104\074\001\002\000\022\052\uffbb" +
    "\053\uffbb\054\uffbb\055\uffbb\056\uffbb\060\uffbb\061\uffbb\062" +
    "\uffbb\001\002\000\022\052\052\053\051\054\057\055\055" +
    "\056\060\060\056\061\054\062\061\001\002\000\130\005" +
    "\102\010\014\011\015\012\004\014\106\015\122\017\013" +
    "\021\012\022\034\023\040\024\041\025\035\026\036\027" +
    "\042\030\077\031\120\032\124\033\101\044\uffc8\045\uffc8" +
    "\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac\057\105\060" +
    "\uffac\061\uffac\062\uffac\065\064\066\063\067\065\070\100" +
    "\071\110\074\076\075\107\076\075\077\062\100\116\101" +
    "\071\102\073\103\066\104\074\001\002\000\022\052\uffba" +
    "\053\uffba\054\uffba\055\uffba\056\uffba\060\uffba\061\uffba\062" +
    "\uffba\001\002\000\022\052\uffb7\053\uffb7\054\uffb7\055\uffb7" +
    "\056\uffb7\060\uffb7\061\uffb7\062\uffb7\001\002\000\004\014" +
    "\263\001\002\000\006\044\023\045\024\001\002\000\006" +
    "\063\265\064\267\001\002\000\022\052\uffce\053\uffce\054" +
    "\uffce\055\uffce\056\uffce\060\uffce\061\uffce\062\uffce\001\002" +
    "\000\022\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\060" +
    "\uffb8\061\uffb8\062\uffb8\001\002\000\022\052\uffcd\053\uffcd" +
    "\054\uffcd\055\uffcd\056\uffcd\060\uffcd\061\uffcd\062\uffcd\001" +
    "\002\000\006\013\045\016\043\001\002\000\004\014\272" +
    "\001\002\000\022\052\052\053\051\054\057\055\055\056" +
    "\060\060\056\061\054\062\061\001\002\000\130\005\102" +
    "\010\014\011\015\012\004\014\106\015\122\017\013\021" +
    "\012\022\034\023\040\024\041\025\035\026\036\027\042" +
    "\030\077\031\120\032\124\033\101\044\uffc8\045\uffc8\052" +
    "\uffac\053\uffac\054\uffac\055\uffac\056\uffac\057\105\060\uffac" +
    "\061\uffac\062\uffac\065\064\066\063\067\065\070\100\071" +
    "\110\074\076\075\107\076\075\077\062\100\116\101\071" +
    "\102\073\103\066\104\074\001\002\000\022\052\052\053" +
    "\051\054\057\055\055\056\060\060\056\061\054\062\061" +
    "\001\002\000\024\002\uffbd\052\uffbd\053\uffbd\054\uffbd\055" +
    "\uffbd\056\uffbd\060\uffbd\061\uffbd\062\uffbd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\273\000\012\002\010\003\007\017\006\032\004\001" +
    "\001\000\002\001\001\000\006\020\043\033\036\001\001" +
    "\000\004\025\024\001\001\000\012\002\021\003\007\017" +
    "\006\032\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\030\001\001\000\002\001" +
    "\001\000\006\003\032\032\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\046\001\001\000\004\025\047\001\001" +
    "\000\004\027\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\003\113\004\111\005\110\012\103\014\122" +
    "\017\120\020\071\023\114\031\066\032\004\034\067\035" +
    "\116\036\102\037\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\261\001\001\000\006\025\244\027\243\001\001" +
    "\000\002\001\001\000\006\021\225\032\226\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\025\175\027\174\001\001" +
    "\000\002\001\001\000\004\025\166\001\001\000\004\025" +
    "\160\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\152\001\001\000\002\001\001" +
    "\000\004\025\135\001\001\000\002\001\001\000\036\003" +
    "\113\004\133\005\110\012\103\014\122\017\120\020\071" +
    "\023\114\031\066\032\004\034\067\035\116\036\102\037" +
    "\112\001\001\000\006\010\126\023\125\001\001\000\036" +
    "\003\113\004\124\005\110\012\103\014\122\017\120\020" +
    "\071\023\114\031\066\032\004\034\067\035\116\036\102" +
    "\037\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\131\023\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\140\001\001\000\006\012\147\023\114\001\001\000" +
    "\006\012\146\023\114\001\001\000\004\025\141\001\001" +
    "\000\004\027\142\001\001\000\006\005\144\035\143\001" +
    "\001\000\002\001\001\000\004\027\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\113\004\151\005\110\012\103\014\122\017\120\020\071" +
    "\023\114\031\066\032\004\034\067\035\116\036\102\037" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\156\023\114\001\001\000\006\012\155\023\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\162\001\001\000\004\027" +
    "\163\001\001\000\036\003\113\004\164\005\110\012\103" +
    "\014\122\017\120\020\071\023\114\031\066\032\004\034" +
    "\067\035\116\036\102\037\112\001\001\000\004\027\165" +
    "\001\001\000\002\001\001\000\004\027\167\001\001\000" +
    "\002\001\001\000\004\027\171\001\001\000\004\025\172" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\113\004\221\005\110\012\103\014\122\017\120\020\071" +
    "\023\114\031\066\032\004\034\067\035\116\036\102\037" +
    "\112\001\001\000\002\001\001\000\006\024\201\026\205" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\214\001\001\000\004\027\215\001\001\000\036\003" +
    "\113\004\216\005\110\012\103\014\122\017\120\020\071" +
    "\023\114\031\066\032\004\034\067\035\116\036\102\037" +
    "\112\001\001\000\004\027\217\001\001\000\036\003\113" +
    "\004\220\005\110\012\103\014\122\017\120\020\071\023" +
    "\114\031\066\032\004\034\067\035\116\036\102\037\112" +
    "\001\001\000\002\001\001\000\004\027\222\001\001\000" +
    "\036\003\113\004\223\005\110\012\103\014\122\017\120" +
    "\020\071\023\114\031\066\032\004\034\067\035\116\036" +
    "\102\037\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\113\004\230\005\110\012\103\014\122\017" +
    "\120\020\071\023\114\031\066\032\004\034\067\035\116" +
    "\036\102\037\112\001\001\000\006\021\227\032\226\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\235" +
    "\001\001\000\006\021\234\032\226\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\240\001\001\000\002\001\001\000\004\025" +
    "\242\001\001\000\002\001\001\000\036\003\113\004\255" +
    "\005\110\012\103\014\122\017\120\020\071\023\114\031" +
    "\066\032\004\034\067\035\116\036\102\037\112\001\001" +
    "\000\002\001\001\000\006\024\246\026\205\001\001\000" +
    "\002\001\001\000\004\025\250\001\001\000\004\027\251" +
    "\001\001\000\036\003\113\004\252\005\110\012\103\014" +
    "\122\017\120\020\071\023\114\031\066\032\004\034\067" +
    "\035\116\036\102\037\112\001\001\000\004\027\253\001" +
    "\001\000\036\003\113\004\254\005\110\012\103\014\122" +
    "\017\120\020\071\023\114\031\066\032\004\034\067\035" +
    "\116\036\102\037\112\001\001\000\002\001\001\000\004" +
    "\027\256\001\001\000\036\003\113\004\257\005\110\012" +
    "\103\014\122\017\120\020\071\023\114\031\066\032\004" +
    "\034\067\035\116\036\102\037\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\263" +
    "\001\001\000\004\030\265\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\270\001\001" +
    "\000\002\001\001\000\004\027\272\001\001\000\036\003" +
    "\113\004\273\005\110\012\103\014\122\017\120\020\071" +
    "\023\114\031\066\032\004\034\067\035\116\036\102\037" +
    "\112\001\001\000\004\027\274\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParseCodigo$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParseCodigo$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParseCodigo$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



/**Metodo al que se llama automáticamente ante algún error sintactico.*/
public void syntax_error(Symbol s){
System.out.println("Error en la Línea " + (s.right+1) +" Columna "+s.left+ " Identificador " +s.value + " no reconocido." );
}
/**Metodo al que se llama en el momento en que ya no es posible una recuperación de errores.*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
System.out.println("Error en la Línea " + (s.right+1)+ "Columna "+s.left+". Identificador " + s.value + " no reconocido.");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParseCodigo$actions {


/*
static Stack pilaCodigo= new Stack();
static Stack erroresCodigo= new Stack();
*/

  private final ParseCodigo parser;

  /** Constructor */
  CUP$ParseCodigo$actions(ParseCodigo parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParseCodigo$do_action(
    int                        CUP$ParseCodigo$act_num,
    java_cup.runtime.lr_parser CUP$ParseCodigo$parser,
    java.util.Stack            CUP$ParseCodigo$stack,
    int                        CUP$ParseCodigo$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParseCodigo$result;

      /* select the action based on the action number */
      switch (CUP$ParseCodigo$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Linea8 ::= Tk_name LineaAgrupa Tk_Puntos LineaAgrupa LineaGen Linea2 LineaGen 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea8",8, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-6)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Linea9 ::= Tk_Puntos 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea9",9, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Linea9 ::= Tk_name 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea9",9, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Linea9 ::= Tk_name Linea8 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea9",9, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Linea9 ::= Tk_Puntos Linea8 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea9",9, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Linea8 ::= LineaOpera Linea9 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea8",8, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Operaciones2 ::= Tk_name Linea8 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Operaciones2",12, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Operaciones2 ::= Tk_Puntos Linea8 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Operaciones2",12, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Linea7 ::= Tk_Puntos Tk_puntoComa 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea7",7, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Linea7 ::= Tk_Puntos Linea6 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea7",7, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Linea6 ::= LineaOpera Linea7 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea6",6, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Operaciones ::= Tk_Puntos Linea6 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Operaciones",10, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Linea3 ::= LineaSenteCaso Tk_name Tk_Dosp Linea2 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea3",3, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-3)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Linea2 ::= 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea2",2, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Linea2 ::= Tk_print LineaAgrupa LineaGen Tk_name LineaGen LineaAgrupa Tk_puntoComa 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea2",2, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-6)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Linea2 ::= Linea3 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea2",2, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Linea2 ::= Linea8 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea2",2, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Linea2 ::= LineaSenteMien LineaGen Linea2 LineaGen Linea2 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea2",2, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-4)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Linea2 ::= LineaSenteMien LineaAgrupa Tk_name LineaRela Tk_name LineaAgrupa LineaGen Linea2 LineaGen Linea2 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea2",2, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-9)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Linea2 ::= LineaSenteConti 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea2",2, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Linea2 ::= Operaciones Linea2 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea2",2, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Linea2 ::= LineaVar LineaVar1 Linea2 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea2",2, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Linea2 ::= LineaComen Linea2 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea2",2, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Linea2 ::= Linea1 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea2",2, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Linea2 ::= LineaMetod Tk_name 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea2",2, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Linea2 ::= LineaMetod LineaAgrupa Tk_name LineaAgrupa LineaAsig 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea2",2, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-4)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Linea2 ::= LineaSenteCaso LineaAgrupa Operaciones2 LineaAgrupa LineaGen Linea3 LineaGen 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea2",2, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-6)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Linea2 ::= LineaSenteSi LineaGen Linea2 LineaGen Linea2 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea2",2, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-4)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Linea2 ::= LineaSenteSi LineaAgrupa Tk_name LineaRela Tk_name LineaAgrupa LineaGen Linea2 LineaGen Linea2 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea2",2, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-9)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Linea1 ::= LineaVisi LineaVar Tk_name LineaAgrupa LineaAgrupa LineaGen Linea2 LineaGen 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea1",1, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-7)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Linea1 ::= LineaVisi LineaCyH Tk_name LineaCyH Tk_name LineaGen Linea2 LineaGen 
            {
              Object RESULT =null;
		JOptionPane.showMessageDialog(null, "Copilacion Exitosa ", "Copilacion", JOptionPane.WARNING_MESSAGE);
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea1",1, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-7)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LineaSenteConti ::= Tk_Exit 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaSenteConti",29, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LineaSenteConti ::= TK_Continuar 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaSenteConti",29, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LineaSenteMien ::= Tk_Hacer 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaSenteMien",28, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LineaSenteMien ::= Tk_Mientras 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaSenteMien",28, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LineaSenteCaso ::= Tk_Defec 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaSenteCaso",27, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LineaSenteCaso ::= Tk_Caso 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaSenteCaso",27, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LineaSenteCaso ::= Tk_Inter 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaSenteCaso",27, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LineaSenteSi ::= Tk_SiNo 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaSenteSi",26, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LineaSenteSi ::= Tk_SiNoSi 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaSenteSi",26, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LineaSenteSi ::= Tk_Si 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaSenteSi",26, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LineaMetod ::= 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaMetod",23, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LineaMetod ::= Tk_Firts 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaMetod",23, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LineaMetod ::= Tk_new 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaMetod",23, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LineaMetod ::= Tk_Over 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaMetod",23, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LineaMetod ::= Tk_Super 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaMetod",23, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LineaAsig ::= Tk_puntoComa 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaAsig",22, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LineaAsig ::= Tk_Asig 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaAsig",22, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LineaGen ::= Tk_false 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaGen",21, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LineaGen ::= Tk_true 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaGen",21, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LineaGen ::= Tk_mientras 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaGen",21, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LineaGen ::= Tk_Igual 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaGen",21, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LineaGen ::= Tk_Coma 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaGen",21, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LineaGen ::= Tk_Close 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaGen",21, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LineaGen ::= Tk_Open 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaGen",21, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LineaGen ::= Tk_Comillas 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaGen",21, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LineaLog ::= Tk_And 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaLog",20, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LineaLog ::= Tk_xOr 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaLog",20, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LineaLog ::= Tk_Or 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaLog",20, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LineaLog ::= Tk_Not 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaLog",20, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LineaAgrupa ::= Tk_Cerrar 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaAgrupa",19, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LineaAgrupa ::= Tk_Abrir 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaAgrupa",19, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LineaRela ::= LineaLog 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaRela",18, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LineaRela ::= Tk_dif 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaRela",18, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LineaRela ::= Tk_igualIgual 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaRela",18, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LineaRela ::= Tk_menorq 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaRela",18, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LineaRela ::= Tk_mayorq 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaRela",18, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LineaRela ::= Tk_menor 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaRela",18, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LineaRela ::= Tk_mayor 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaRela",18, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LineaConta ::= Tk_name Tk_minus Tk_puntoComa 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaConta",16, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LineaConta ::= Tk_name Tk_plus Tk_puntoComa 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaConta",16, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LineaOpera ::= Tk_multi 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaOpera",17, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LineaOpera ::= Tk_pote 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaOpera",17, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LineaOpera ::= Tk_div 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaOpera",17, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LineaOpera ::= Tk_resta 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaOpera",17, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LineaOpera ::= Tk_suma 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaOpera",17, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LineaVar2 ::= 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVar2",30, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LineaVar2 ::= Tk_new Tk_name LineaAgrupa Tk_name LineaAgrupa 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVar2",30, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-4)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LineaVar1 ::= LineaVisi LineaVar1 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVar1",15, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LineaVar1 ::= Tk_name Tk_Asig LineaVar2 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVar1",15, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LineaVar1 ::= Tk_name Tk_Coma LineaVar1 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVar1",15, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LineaVar1 ::= Tk_name Tk_puntoComa 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVar1",15, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LineaVar ::= Tk_void 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVar",14, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LineaVar ::= Tk_char 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVar",14, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LineaVar ::= Tk_int 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVar",14, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LineaVar ::= Tk_bool 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVar",14, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LineaVar ::= Tk_double 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVar",14, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LineaVar ::= Tk_string 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVar",14, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LineaComen ::= Tk_OpenC Tk_name Tk_CloseC 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaComen",13, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-2)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LineaComen ::= Tk_DobleB Tk_name 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaComen",13, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LineaCyH ::= Tk_clase 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaCyH",25, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LineaCyH ::= Tk_heredar 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaCyH",25, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LineaVisi ::= Tk_protect 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVisi",24, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LineaVisi ::= Tk_private 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVisi",24, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LineaVisi ::= Tk_public 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("LineaVisi",24, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Linea0 ::= LineaComen Linea0 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea0",0, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Linea0 ::= Linea1 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea0",0, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Linea0 ::= Tk_import LineaAgrupa Tk_Comillas Tk_name Tk_Comillas LineaAgrupa Tk_puntoComa Linea1 
            {
              Object RESULT =null;

              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("Linea0",0, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-7)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          return CUP$ParseCodigo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Linea0 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)).value;
		RESULT = start_val;
              CUP$ParseCodigo$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.elementAt(CUP$ParseCodigo$top-1)), ((java_cup.runtime.Symbol)CUP$ParseCodigo$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParseCodigo$parser.done_parsing();
          return CUP$ParseCodigo$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

